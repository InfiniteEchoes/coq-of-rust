(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition main (_ : unit) : unit :=
  let vec := Slice::["into_vec"] [ 1; 9; 3; 3; 13; 2 ] in
  let index_of_first_even_number :=
    vec.["iter"].["position"] (fun x => eqb (rem x 2) 0) in
  match (index_of_first_even_number, Some 5) with
  | (left_val, right_val) =>
    if (not (eqb (deref left_val) (deref right_val)) : bool) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  let index_of_first_negative_number :=
    vec.["into_iter"].["position"] (fun x => lt x 0) in
  match (index_of_first_negative_number, None) with
  | (left_val, right_val) =>
    if (not (eqb (deref left_val) (deref right_val)) : bool) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.
