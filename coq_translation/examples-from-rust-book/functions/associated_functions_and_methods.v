(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Point.
  Record t : Set := {
    x : f64;
    y : f64;
  }.
  
  Global Instance Get_x : NamedField.Class t "x" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_y : NamedField.Class t "y" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
  Arguments associated_function name {T AssociatedFunction}.
End Point.
Definition Point : Set := Point.t.

Module ImplPoint.
  Definition Self := Point.
  
  Definition origin (_ : unit) : Point :=
    {| Point.y := 0 (* 0.0 *); Point.x := 1 (* 1.0 *); |}.
  
  Global Instance AF_origin : Point.AssociatedFunction "origin" _ := {|
    Point.associated_function := origin;
  |}.
  
  Definition new (x : f64) (y : f64) : Point :=
    {| Point.x := x; Point.y := y; |}.
  
  Global Instance AF_new : Point.AssociatedFunction "new" _ := {|
    Point.associated_function := new;
  |}.
End ImplPoint.

Module Rectangle.
  Record t : Set := {
    p1 : Point;
    p2 : Point;
  }.
  
  Global Instance Get_p1 : NamedField.Class t "p1" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_p2 : NamedField.Class t "p2" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
  Arguments associated_function name {T AssociatedFunction}.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Module ImplRectangle.
  Definition Self := Rectangle.
  
  Definition get_p1 (self : ref Self) : Point :=
    NamedField.get (name := "p1") self.
  
  Global Instance M_get_p1 : Method "get_p1" _ := {|
    method := get_p1;
  |}.
  Global Instance AF_get_p1 : Rectangle.AssociatedFunction "get_p1" _ := {|
    Rectangle.associated_function := get_p1;
  |}.
  
  Definition area (self : ref Self) : f64 :=
    let Point {| Point.x := x1; Point.y := y1; |} :=
      NamedField.get (name := "p1") self in
    let Point {| Point.x := x2; Point.y := y2; |} :=
      NamedField.get (name := "p2") self in
    method "abs" (mul (sub x1 x2) (sub y1 y2)).
  
  Global Instance M_area : Method "area" _ := {|
    method := area;
  |}.
  Global Instance AF_area : Rectangle.AssociatedFunction "area" _ := {|
    Rectangle.associated_function := area;
  |}.
  
  Definition perimeter (self : ref Self) : f64 :=
    let Point {| Point.x := x1; Point.y := y1; |} :=
      NamedField.get (name := "p1") self in
    let Point {| Point.x := x2; Point.y := y2; |} :=
      NamedField.get (name := "p2") self in
    mul 2 (* 2.0 *) (add (method "abs" (sub x1 x2)) (method "abs" (sub y1 y2))).
  
  Global Instance M_perimeter : Method "perimeter" _ := {|
    method := perimeter;
  |}.
  Global Instance
    AF_perimeter
    :
    Rectangle.AssociatedFunction
    "perimeter"
    _
    :=
    {|
    Rectangle.associated_function := perimeter;
  |}.
  
  Definition translate (self : mut_ref Self) (x : f64) (y : f64) :=
    assign
      (NamedField.get (name := "x") (NamedField.get (name := "p1") self))
      (add
        (NamedField.get (name := "x") (NamedField.get (name := "p1") self))
        x) ;;
    assign
      (NamedField.get (name := "x") (NamedField.get (name := "p2") self))
      (add
        (NamedField.get (name := "x") (NamedField.get (name := "p2") self))
        x) ;;
    assign
      (NamedField.get (name := "y") (NamedField.get (name := "p1") self))
      (add
        (NamedField.get (name := "y") (NamedField.get (name := "p1") self))
        y) ;;
    assign
      (NamedField.get (name := "y") (NamedField.get (name := "p2") self))
      (add
        (NamedField.get (name := "y") (NamedField.get (name := "p2") self))
        y) ;;
    tt.
  
  Global Instance M_translate : Method "translate" _ := {|
    method := translate;
  |}.
  Global Instance
    AF_translate
    :
    Rectangle.AssociatedFunction
    "translate"
    _
    :=
    {|
    Rectangle.associated_function := translate;
  |}.
End ImplRectangle.

Module Pair.
  Inductive t : Set := Build (_ : Box) (_ : Box).
  
  Global Instance Get_0 : IndexedField.Class t 0 _ := {|
    IndexedField.get '(Build x0 _) := x0;
  |}.
  Global Instance Get_1 : IndexedField.Class t 1 _ := {|
    IndexedField.get '(Build _ x1) := x1;
  |}.
End Pair.
Definition Pair := Pair.t.

Module ImplPair.
  Definition Self := Pair.
  
  Definition destroy (self : Self) :=
    let Pair (first, second) := self in
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1
        [ "Destroying Pair("; ", "; ")\n" ]
        [
          _crate.fmt.ImplArgumentV1.new_display first;
          _crate.fmt.ImplArgumentV1.new_display second
        ]) ;;
    tt ;;
    tt.
  
  Global Instance M_destroy : Method "destroy" _ := {|
    method := destroy;
  |}.
  Global Instance AF_destroy : Pair.AssociatedFunction "destroy" _ := {|
    Pair.associated_function := destroy;
  |}.
End ImplPair.

Definition main (_ : unit) : unit :=
  let rectangle :=
    {|
      Rectangle.p1 := ImplPoint.origin tt;
      Rectangle.p2 := ImplPoint.new 3 (* 3.0 *) 4 (* 4.0 *);
    |} in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Rectangle perimeter: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (method "perimeter" rectangle)
      ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Rectangle area: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (method "area" rectangle) ]) ;;
  tt ;;
  let square :=
    {|
      Rectangle.p1 := ImplPoint.origin tt;
      Rectangle.p2 := ImplPoint.new 1 (* 1.0 *) 1 (* 1.0 *);
    |} in
  method "translate" square 1 (* 1.0 *) 1 (* 1.0 *) ;;
  let pair := Pair.Build (ImplBox.new 1) (ImplBox.new 2) in
  method "destroy" pair ;;
  tt.
