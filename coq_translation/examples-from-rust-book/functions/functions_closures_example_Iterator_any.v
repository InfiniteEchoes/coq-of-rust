(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Definition main (_ : unit) :=
  let vec1 := ComplexTypePath.into_vec [1;2;3] in
  let vec2 := ComplexTypePath.into_vec [4;5;6] in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["2 in vec1: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        (any (iter vec1) (fun x => eq x 2))]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["2 in vec2: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        (any (into_iter vec2) (fun x => eq x 2))]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["vec1 len: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (len vec1)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["First element of vec1 is: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display vec1[0]]) ;;
  tt ;;
  let array1 := [1;2;3] in
  let array2 := [4;5;6] in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["2 in array1: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        (any (iter array1) (fun x => eq x 2))]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["2 in array2: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        (any (into_iter array2) (fun x => eq x 2))]) ;;
  tt ;;
  tt.