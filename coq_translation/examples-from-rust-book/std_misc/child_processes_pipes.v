(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Definition PANGRAM (_ : unit) :=
  "the quick brown fox jumped over the lazy dog\n".

Definition main (_ : unit) :=
  let process := match spawn
    (stdout
      (stdin (ImplCommand.new "wc") (ImplStdio.piped tt))
      (ImplStdio.piped tt)) with
  | Err (why) =>
    _crate.rt.panic_fmt
      (_crate::fmt::ImplArguments.new_v1
        ["couldn't spawn wc: "]
        [_crate::fmt::ImplArgumentV1.new_display why])
  | Ok (process) => process
  end in
  match write_all (unwrap process.stdin) (as_bytes PANGRAM) with
  | Err (why) =>
    _crate.rt.panic_fmt
      (_crate::fmt::ImplArguments.new_v1
        ["couldn't write to wc stdin: "]
        [_crate::fmt::ImplArgumentV1.new_display why])
  | Ok (_) =>
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1 ["sent pangram to wc\n"] []) ;;
    tt
  end ;;
  let s := ImplString.new tt in
  match read_to_string (unwrap process.stdout) s with
  | Err (why) =>
    _crate.rt.panic_fmt
      (_crate::fmt::ImplArguments.new_v1
        ["couldn't read wc stdout: "]
        [_crate::fmt::ImplArgumentV1.new_display why])
  | Ok (_) =>
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1
        ["wc responded with:\n"]
        [_crate::fmt::ImplArgumentV1.new_display s]) ;;
    tt
  end.