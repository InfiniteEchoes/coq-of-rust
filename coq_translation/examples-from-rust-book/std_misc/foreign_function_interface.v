(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module fmt := std.fmt.

Error ForeignMod.

Definition cos (z : Complex) : Complex := ccosf z.

Definition main (_ : unit) : unit :=
  let z := {| Complex.re := neg 1 (* 1. *); Complex.im := 0 (* 0. *); |} in
  let z_sqrt := csqrtf z in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "the square root of "; " is "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_debug z;
        _crate.fmt.ImplArgumentV1.new_debug z_sqrt
      ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "cos("; ") = "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_debug z;
        _crate.fmt.ImplArgumentV1.new_debug (cos z)
      ]) ;;
  tt ;;
  tt.

Module Complex.
  Record t : Set := {
    re : f32;
    im : f32;
  }.
  
  Global Instance Get_re : NamedField.Class t "re" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_im : NamedField.Class t "im" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
End Complex.
Definition Complex : Set := Complex.t.

Module Impl__crate_clone_Clone_for_Complex.
  Definition Self := Complex.
  
  Global Instance I : _crate.clone.Clone.Class Self := {|
    _crate.clone.Clone.clone (self : ref Self) :=
      let _ := tt in
      deref self;
  |}.
End Impl__crate_clone_Clone_for_Complex.

Module Impl__crate_marker_Copy_for_Complex.
  Definition Self := Complex.
  
  Global Instance I : _crate.marker.Copy.Class Self :=
      _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_Complex.

Module Impl_fmt_Debug_for_Complex.
  Definition Self := Complex.
  
  Global Instance I : fmt.Debug.Class Self := {|
    fmt.Debug.fmt (self : ref Self) (f : mut_ref fmt.Formatter) :=
      if lt (NamedField.get (name := "im") self) 0 (* 0. *) then
        method
          "write_fmt"
          f
          (_crate.fmt.ImplArguments.new_v1
            [ ""; "-"; "i" ]
            [
              _crate.fmt.ImplArgumentV1.new_display
                (NamedField.get (name := "re") self);
              _crate.fmt.ImplArgumentV1.new_display
                (neg (NamedField.get (name := "im") self))
            ])
      else
        method
          "write_fmt"
          f
          (_crate.fmt.ImplArguments.new_v1
            [ ""; "+"; "i" ]
            [
              _crate.fmt.ImplArgumentV1.new_display
                (NamedField.get (name := "re") self);
              _crate.fmt.ImplArgumentV1.new_display
                (NamedField.get (name := "im") self)
            ]);
  |}.
End Impl_fmt_Debug_for_Complex.
