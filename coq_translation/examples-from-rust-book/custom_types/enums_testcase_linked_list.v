(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Error Enum.

(* Impl [List] *)
Module ImplList.
  Definition new (_ : unit) : List :=
    Nil.
  
  Definition prepend (self : Self) (elem : u32) : List :=
    Cons elem (ImplBox.new self).
  
  Definition len (self : static_ref Self) : u32 :=
    match deref self with
    | Cons (_, tail) => add 1 (len tail)
    | Nil => 0
    end.
  
  Definition stringify (self : static_ref Self) : String :=
    match deref self with
    | Cons (head, tail) =>
      let res := _crate.fmt.format
        (_crate::fmt::ImplArguments.new_v1
          ["";", "]
          [_crate::fmt::ImplArgumentV1.new_display
            head;_crate::fmt::ImplArgumentV1.new_display (stringify tail)]) in
      res
    | Nil =>
      let res := _crate.fmt.format
        (_crate::fmt::ImplArguments.new_v1 ["Nil"] []) in
      res
    end.
End ImplList.
(* End impl [List] *)

Definition main (_ : unit) :=
  let list := ImplList.new tt in
  assign list := prepend list 1 ;;
  assign list := prepend list 2 ;;
  assign list := prepend list 3 ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["linked list has length: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (len list)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (stringify list)]) ;;
  tt ;;
  tt.