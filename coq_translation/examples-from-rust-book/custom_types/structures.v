(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Person.
  Record t : Set := {
    name : String;
    age : u8;
  }.
  
  Global Instance Get_name : NamedField.Class t "name" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_age : NamedField.Class t "age" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
  Arguments associated_function name {T AssociatedFunction}.
End Person.
Definition Person : Set := Person.t.

Module Impl__crate_fmt_Debug_for_Person.
  Definition Self := Person.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
    _crate.fmt.ImplFormatter.debug_struct_field2_finish
      f
      "Person"
      "name"
      (NamedField.get (name := "name") self)
      "age"
      (NamedField.get (name := "age") self).
  
  Global Instance M_fmt : Method "fmt" _ := {|
    method := fmt;
  |}.
  Global Instance AF_fmt : Person.AssociatedFunction "fmt" _ := {|
    Person.associated_function := fmt;
  |}.
  Global Instance AFT_fmt : _crate.fmt.Debug.AssociatedFunction "fmt" _ := {|
    _crate.fmt.Debug.associated_function := fmt;
  |}.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt := fmt;
  |}.
End Impl__crate_fmt_Debug_for_Person.

Error StructUnit.

Module Pair.
  Inductive t : Set := Build (_ : i32) (_ : f32).
  
  Global Instance Get_0 : IndexedField.Class t 0 _ := {|
    IndexedField.get '(Build x0 _) := x0;
  |}.
  Global Instance Get_1 : IndexedField.Class t 1 _ := {|
    IndexedField.get '(Build _ x1) := x1;
  |}.
End Pair.
Definition Pair := Pair.t.

Module Point.
  Record t : Set := {
    x : f32;
    y : f32;
  }.
  
  Global Instance Get_x : NamedField.Class t "x" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_y : NamedField.Class t "y" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
  Arguments associated_function name {T AssociatedFunction}.
End Point.
Definition Point : Set := Point.t.

Module Rectangle.
  Record t : Set := {
    top_left : Point;
    bottom_right : Point;
  }.
  
  Global Instance Get_top_left : NamedField.Class t "top_left" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_bottom_right : NamedField.Class t "bottom_right" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
  Arguments associated_function name {T AssociatedFunction}.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Definition main (_ : unit) : unit :=
  let name := ImplString.from "Peter" in
  let age := 27 in
  let peter := {| Person.name := name; Person.age := age; |} in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ ""; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_debug peter ]) ;;
  tt ;;
  let point := {| Point.x := 10 (* 10.3 *); Point.y := 0 (* 0.4 *); |} in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "point coordinates: ("; ", "; ")\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_display
          (NamedField.get (name := "x") point);
        _crate.fmt.ImplArgumentV1.new_display
          (NamedField.get (name := "y") point)
      ]) ;;
  tt ;;
  let bottom_right := {| Point.x := 5 (* 5.2 *); |} with point in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "second point: ("; ", "; ")\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_display
          (NamedField.get (name := "x") bottom_right);
        _crate.fmt.ImplArgumentV1.new_display
          (NamedField.get (name := "y") bottom_right)
      ]) ;;
  tt ;;
  let Point {| Point.x := left_edge; Point.y := top_edge; |} := point in
  let _rectangle :=
    {|
      Rectangle.top_left := {| Point.x := left_edge; Point.y := top_edge; |};
      Rectangle.bottom_right := bottom_right;
    |} in
  let _unit := Unit in
  let pair := Pair.Build 1 0 (* 0.1 *) in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "pair contains "; " and "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_debug
          (IndexedField.get (index := 0) pair);
        _crate.fmt.ImplArgumentV1.new_debug (IndexedField.get (index := 1) pair)
      ]) ;;
  tt ;;
  let Pair (integer, decimal) := pair in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "pair contains "; " and "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_debug integer;
        _crate.fmt.ImplArgumentV1.new_debug decimal
      ]) ;;
  tt ;;
  tt.
