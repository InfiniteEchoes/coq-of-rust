(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.core.prelude.rust_2015.

Module BitAnd := core.ops.BitAnd.

Module BitAndAssign := core.ops.BitAndAssign.

Module BitOr := core.ops.BitOr.

Module BitOrAssign := core.ops.BitOrAssign.

Module BitXor := core.ops.BitXor.

Module BitXorAssign := core.ops.BitXorAssign.

Module Neg := core.ops.Neg.

Module Not := core.ops.Not.

Module Option := core.option.Option.
Definition Option := Option.t.

Module Choice.
  Inductive t : Set := Build (_ : u8).
  
  Global Instance Get_0 : IndexedField.Class t 0 u8 := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Choice.
Definition Choice := Choice.t.

Module Impl__crate_marker_Copy_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : _crate.marker.Copy.Class Self :=
      _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_Choice.

Module Impl__crate_clone_Clone_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : _crate.clone.Clone.Class Self := {|
    _crate.clone.Clone.clone (self : ref Self) :=
      let _ := tt in
      deref self;
  |}.
End Impl__crate_clone_Clone_for_Choice.

Module Impl__crate_fmt_Debug_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_tuple_field1_finish
        f
        "Choice"
        (IndexedField.get (index := 0) self);
  |}.
End Impl__crate_fmt_Debug_for_Choice.

(* Impl [Choice] *)
Module ImplChoice.
  Definition unwrap_u8 (self : ref Self) : u8 :=
    IndexedField.get (index := 0) self.
End ImplChoice.
(* End impl [Choice] *)

Module Impl_From_for_bool.
  Definition Self := bool.
  
  Global Instance I : From.Class Choice Self := {|
    From.from (source : Choice) :=
      if true then
        if
          not
            (bit_or
              (eqb (IndexedField.get (index := 0) source) 0)
              (eqb (IndexedField.get (index := 0) source) 1))
        then
          _crate.panicking.panic
            "assertion failed: (source.0 == 0u8) | (source.0 == 1u8)"
        else
          tt ;;
        tt
      else
        tt ;;
      ne (IndexedField.get (index := 0) source) 0;
  |}.
End Impl_From_for_bool.

Module Impl_BitAnd_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : BitAnd.Class Self := {|
    BitAnd.Output := Choice;
    BitAnd.bitand (self : Self) (rhs : Choice) :=
      method
        "into"
        (bit_and
          (IndexedField.get (index := 0) self)
          (IndexedField.get (index := 0) rhs));
  |}.
End Impl_BitAnd_for_Choice.

Module Impl_BitAndAssign_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : BitAndAssign.Class Self := {|
    BitAndAssign.bitand_assign (self : mut_ref Self) (rhs : Choice) :=
      assign deref self := bit_and (deref self) rhs ;;
      tt;
  |}.
End Impl_BitAndAssign_for_Choice.

Module Impl_BitOr_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : BitOr.Class Self := {|
    BitOr.Output := Choice;
    BitOr.bitor (self : Self) (rhs : Choice) :=
      method
        "into"
        (bit_or
          (IndexedField.get (index := 0) self)
          (IndexedField.get (index := 0) rhs));
  |}.
End Impl_BitOr_for_Choice.

Module Impl_BitOrAssign_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : BitOrAssign.Class Self := {|
    BitOrAssign.bitor_assign (self : mut_ref Self) (rhs : Choice) :=
      assign deref self := bit_or (deref self) rhs ;;
      tt;
  |}.
End Impl_BitOrAssign_for_Choice.

Module Impl_BitXor_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : BitXor.Class Self := {|
    BitXor.Output := Choice;
    BitXor.bitxor (self : Self) (rhs : Choice) :=
      method
        "into"
        (bit_xor
          (IndexedField.get (index := 0) self)
          (IndexedField.get (index := 0) rhs));
  |}.
End Impl_BitXor_for_Choice.

Module Impl_BitXorAssign_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : BitXorAssign.Class Self := {|
    BitXorAssign.bitxor_assign (self : mut_ref Self) (rhs : Choice) :=
      assign deref self := bit_xor (deref self) rhs ;;
      tt;
  |}.
End Impl_BitXorAssign_for_Choice.

Module Impl_Not_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : Not.Class Self := {|
    Not.Output := Choice;
    Not.not (self : Self) :=
      method "into" (bit_and 1 (not (IndexedField.get (index := 0) self)));
  |}.
End Impl_Not_for_Choice.

Definition black_box (input : u8) : u8 :=
  if true then
    if not (bit_or (eqb input 0) (eqb input 1)) then
      _crate.panicking.panic "assertion failed: (input == 0u8) | (input == 1u8)"
    else
      tt ;;
    tt
  else
    tt ;;
  core.ptr.read_volatile (cast input (ref u8)).

Module Impl_From_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : From.Class u8 Self := {|
    From.from (input : u8) := Choice.Build (black_box input);
  |}.
End Impl_From_for_Choice.

Module ConstantTimeEq.
  Class Class (Self : Set) : Set := {
    ct_eq : (ref Self) -> ((ref Self) -> Choice);
    ct_ne : (ref Self) -> ((ref Self) -> Choice);
  }.
  
  Global Instance Method_ct_eq `(Class) : Method "ct_eq" _ := {|
    method := ct_eq;
  |}.
  Global Instance Method_ct_ne `(Class) : Method "ct_ne" _ := {|
    method := ct_ne;
  |}.
End ConstantTimeEq.

Module Impl_ConstantTimeEq_for_Slice.
  Definition Self := Slice.
  
  Global Instance I T : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (_rhs : ref Slice) :=
      let len := method "len" self in
      if ne len (method "len" _rhs) then
        Return (ImplChoice.from 0) ;;
        tt
      else
        tt ;;
      let x := 1 in
      match into_iter (method "zip" (method "iter" self) (method "iter" _rhs))
      with
      | iter =>
        loop
          match next iter with
          | None => Break
          | Some {| Some.0 := (ai, bi); |} =>
            assign x := bit_and x (method "unwrap_u8" (method "ct_eq" ai bi)) ;;
            tt
          end ;;
          tt
          from
          for
      end ;;
      method "into" x;
  |}.
End Impl_ConstantTimeEq_for_Slice.

Module Impl_ConstantTimeEq_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (rhs : ref Choice) :=
      not (bit_xor (deref self) (deref rhs));
  |}.
End Impl_ConstantTimeEq_for_Choice.

Module Impl_ConstantTimeEq_for_u8.
  Definition Self := u8.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref u8) :=
      let x := bit_xor self other in
      let y := shr (bit_or x (method "wrapping_neg" x)) (sub 8 1) in
      method "into" (cast (bit_xor y (cast 1 u8)) u8);
  |}.
End Impl_ConstantTimeEq_for_u8.

Module Impl_ConstantTimeEq_for_i8.
  Definition Self := i8.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref i8) :=
      method "ct_eq" (cast (deref self) u8) (cast (deref other) u8);
  |}.
End Impl_ConstantTimeEq_for_i8.

Module Impl_ConstantTimeEq_for_u16.
  Definition Self := u16.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref u16) :=
      let x := bit_xor self other in
      let y := shr (bit_or x (method "wrapping_neg" x)) (sub 16 1) in
      method "into" (cast (bit_xor y (cast 1 u16)) u8);
  |}.
End Impl_ConstantTimeEq_for_u16.

Module Impl_ConstantTimeEq_for_i16.
  Definition Self := i16.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref i16) :=
      method "ct_eq" (cast (deref self) u16) (cast (deref other) u16);
  |}.
End Impl_ConstantTimeEq_for_i16.

Module Impl_ConstantTimeEq_for_u32.
  Definition Self := u32.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref u32) :=
      let x := bit_xor self other in
      let y := shr (bit_or x (method "wrapping_neg" x)) (sub 32 1) in
      method "into" (cast (bit_xor y (cast 1 u32)) u8);
  |}.
End Impl_ConstantTimeEq_for_u32.

Module Impl_ConstantTimeEq_for_i32.
  Definition Self := i32.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref i32) :=
      method "ct_eq" (cast (deref self) u32) (cast (deref other) u32);
  |}.
End Impl_ConstantTimeEq_for_i32.

Module Impl_ConstantTimeEq_for_u64.
  Definition Self := u64.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref u64) :=
      let x := bit_xor self other in
      let y := shr (bit_or x (method "wrapping_neg" x)) (sub 64 1) in
      method "into" (cast (bit_xor y (cast 1 u64)) u8);
  |}.
End Impl_ConstantTimeEq_for_u64.

Module Impl_ConstantTimeEq_for_i64.
  Definition Self := i64.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref i64) :=
      method "ct_eq" (cast (deref self) u64) (cast (deref other) u64);
  |}.
End Impl_ConstantTimeEq_for_i64.

Module Impl_ConstantTimeEq_for_usize.
  Definition Self := usize.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref usize) :=
      let x := bit_xor self other in
      let y :=
        shr
          (bit_or x (method "wrapping_neg" x))
          (sub (mul (Root.core.mem.size_of tt) 8) 1) in
      method "into" (cast (bit_xor y (cast 1 usize)) u8);
  |}.
End Impl_ConstantTimeEq_for_usize.

Module Impl_ConstantTimeEq_for_isize.
  Definition Self := isize.
  
  Global Instance I : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (other : ref isize) :=
      method "ct_eq" (cast (deref self) usize) (cast (deref other) usize);
  |}.
End Impl_ConstantTimeEq_for_isize.

Module ConditionallySelectable.
  Class Class (Self : Set) : Set := {
    conditional_select : (ref Self) -> ((ref Self) -> (Choice -> Self));
    conditional_assign : (mut_ref Self) -> ((ref Self) -> (Choice -> _));
    conditional_swap : (mut_ref Self) -> ((mut_ref Self) -> (Choice -> _));
  }.
  
  Global Instance Method_conditional_select `(Class)
    : Method "conditional_select" _ := {|
    method := conditional_select;
  |}.
  Global Instance Method_conditional_assign `(Class)
    : Method "conditional_assign" _ := {|
    method := conditional_assign;
  |}.
  Global Instance Method_conditional_swap `(Class)
    : Method "conditional_swap" _ := {|
    method := conditional_swap;
  |}.
End ConditionallySelectable.

Module Impl_ConditionallySelectable_for_u8.
  Definition Self := u8.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i8)) u8 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i8)) u8 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i8)) u8 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_u8.

Module Impl_ConditionallySelectable_for_i8.
  Definition Self := i8.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i8)) i8 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i8)) i8 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i8)) i8 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_i8.

Module Impl_ConditionallySelectable_for_u16.
  Definition Self := u16.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i16)) u16 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i16)) u16 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i16)) u16 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_u16.

Module Impl_ConditionallySelectable_for_i16.
  Definition Self := i16.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i16)) i16 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i16)) i16 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i16)) i16 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_i16.

Module Impl_ConditionallySelectable_for_u32.
  Definition Self := u32.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i32)) u32 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i32)) u32 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i32)) u32 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_u32.

Module Impl_ConditionallySelectable_for_i32.
  Definition Self := i32.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i32)) i32 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i32)) i32 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i32)) i32 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_i32.

Module Impl_ConditionallySelectable_for_u64.
  Definition Self := u64.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i64)) u64 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i64)) u64 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i64)) u64 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_u64.

Module Impl_ConditionallySelectable_for_i64.
  Definition Self := i64.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i64)) i64 in
      bit_xor a (bit_and mask (bit_xor a b));
    ConditionallySelectable.conditional_assign
        (self : mut_ref Self)
        (other : ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i64)) i64 in
      assign
        deref self
        :=
        bit_xor
          (deref self)
          (bit_and mask (bit_xor (deref self) (deref other))) ;;
      tt;
    ConditionallySelectable.conditional_swap
        (a : mut_ref Self)
        (b : mut_ref Self)
        (choice : Choice) :=
      let mask := cast (neg (cast (method "unwrap_u8" choice) i64)) i64 in
      let t := bit_and mask (bit_xor (deref a) (deref b)) in
      assign deref a := bit_xor (deref a) t ;;
      assign deref b := bit_xor (deref b) t ;;
      tt;
  |}.
End Impl_ConditionallySelectable_for_i64.

Module Impl_ConditionallySelectable_for_Choice.
  Definition Self := Choice.
  
  Global Instance I : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      Choice.Build
        (Implu8.conditional_select
          (IndexedField.get (index := 0) a)
          (IndexedField.get (index := 0) b)
          choice);
  |}.
End Impl_ConditionallySelectable_for_Choice.

Module ConditionallyNegatable.
  Class Class (Self : Set) : Set := {
    conditional_negate : (mut_ref Self) -> (Choice -> _);
  }.
  
  Global Instance Method_conditional_negate `(Class)
    : Method "conditional_negate" _ := {|
    method := conditional_negate;
  |}.
End ConditionallyNegatable.

Module Impl_ConditionallyNegatable_for_T.
  Definition Self := T.
  
  Global Instance I T : ConditionallyNegatable.Class Self := {|
    ConditionallyNegatable.conditional_negate
        (self : mut_ref Self)
        (choice : Choice) :=
      let self_neg := neg (cast self (ref T)) in
      method "conditional_assign" self self_neg choice ;;
      tt;
  |}.
End Impl_ConditionallyNegatable_for_T.

Module CtOption.
  Record t : Set := {
    value : T;
    is_some : Choice;
  }.
End CtOption.
Definition CtOption : Set := CtOption.t.

Module Impl__crate_clone_Clone_for_CtOption.
  Definition Self := CtOption.
  
  Global Instance I T : _crate.clone.Clone.Class Self := {|
    _crate.clone.Clone.clone (self : ref Self) :=
      {|
        CtOption.value := _crate.clone.Clone.clone self.value;
        CtOption.is_some := _crate.clone.Clone.clone self.is_some;
      |};
  |}.
End Impl__crate_clone_Clone_for_CtOption.

Module Impl__crate_marker_Copy_for_CtOption.
  Definition Self := CtOption.
  
  Global Instance I T : _crate.marker.Copy.Class Self :=
      _crate.marker.Copy.Build_Class _.
End Impl__crate_marker_Copy_for_CtOption.

Module Impl__crate_fmt_Debug_for_CtOption.
  Definition Self := CtOption.
  
  Global Instance I T : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_struct_field2_finish
        f
        "CtOption"
        "value"
        self.value
        "is_some"
        self.is_some;
  |}.
End Impl__crate_fmt_Debug_for_CtOption.

Module Impl_From_for_Option.
  Definition Self := Option.
  
  Global Instance I T : From.Class CtOption Self := {|
    From.from (source : CtOption) :=
      if eqb (method "unwrap_u8" (method "is_some" source)) 1 then
        Option.Some source.value
      else
        None;
  |}.
End Impl_From_for_Option.

(* Impl [CtOption] *)
Module ImplCtOption.
  Definition new (value : T) (is_some : Choice) : CtOption :=
    {| CtOption.value := value; CtOption.is_some := is_some; |}.
  
  Definition expect (self : Self) (msg : ref str) : T :=
    match (method "unwrap_u8" self.is_some, 1) with
    | (left_val, right_val) =>
      if not (eqb (deref left_val) (deref right_val)) then
        let kind := _crate.panicking.AssertKind.Eq in
        _crate.panicking.assert_failed
          kind
          (deref left_val)
          (deref right_val)
          (_crate.option.Option.Some
            (_crate.fmt.ImplArguments.new_v1
              [ "" ]
              [ _crate.fmt.ImplArgumentV1.new_display msg ])) ;;
        tt
      else
        tt
    end ;;
    self.value.
  
  Definition unwrap (self : Self) : T :=
    match (method "unwrap_u8" self.is_some, 1) with
    | (left_val, right_val) =>
      if not (eqb (deref left_val) (deref right_val)) then
        let kind := _crate.panicking.AssertKind.Eq in
        _crate.panicking.assert_failed
          kind
          (deref left_val)
          (deref right_val)
          _crate.option.Option.None ;;
        tt
      else
        tt
    end ;;
    self.value.
  
  Definition unwrap_or (self : Self) (def : T) : T :=
    ImplT.conditional_select def self.value self.is_some.
  
  Definition unwrap_or_else (self : Self) (f : F) : T :=
    ImplT.conditional_select (f tt) self.value self.is_some.
  
  Definition is_some (self : ref Self) : Choice := self.is_some.
  
  Definition is_none (self : ref Self) : Choice := not self.is_some.
  
  Definition map (self : Self) (f : F) : CtOption :=
    ImplCtOption.new
      (f (ImplT.conditional_select (ImplT.default tt) self.value self.is_some))
      self.is_some.
  
  Definition and_then (self : Self) (f : F) : CtOption :=
    let tmp :=
      f (ImplT.conditional_select (ImplT.default tt) self.value self.is_some) in
    assign tmp.is_some := bit_and tmp.is_some self.is_some ;;
    tmp.
  
  Definition or_else (self : Self) (f : F) : CtOption :=
    let is_none := method "is_none" self in
    let f := f tt in
    ImplSelf.conditional_select self f is_none.
End ImplCtOption.
(* End impl [CtOption] *)

Module Impl_ConditionallySelectable_for_CtOption.
  Definition Self := CtOption.
  
  Global Instance I T : ConditionallySelectable.Class Self := {|
    ConditionallySelectable.conditional_select
        (a : ref Self)
        (b : ref Self)
        (choice : Choice) :=
      ImplCtOption.new
        (ImplT.conditional_select a.value b.value choice)
        (ImplChoice.conditional_select a.is_some b.is_some choice);
  |}.
End Impl_ConditionallySelectable_for_CtOption.

Module Impl_ConstantTimeEq_for_CtOption.
  Definition Self := CtOption.
  
  Global Instance I T : ConstantTimeEq.Class Self := {|
    ConstantTimeEq.ct_eq (self : ref Self) (rhs : ref CtOption) :=
      let a := method "is_some" self in
      let b := method "is_some" rhs in
      bit_or
        (bit_and (bit_and a b) (method "ct_eq" self.value rhs.value))
        (bit_and (not a) (not b));
  |}.
End Impl_ConstantTimeEq_for_CtOption.

Module ConstantTimeGreater.
  Class Class (Self : Set) : Set := {
    ct_gt : (ref Self) -> ((ref Self) -> Choice);
  }.
  
  Global Instance Method_ct_gt `(Class) : Method "ct_gt" _ := {|
    method := ct_gt;
  |}.
End ConstantTimeGreater.

Module Impl_ConstantTimeGreater_for_u8.
  Definition Self := u8.
  
  Global Instance I : ConstantTimeGreater.Class Self := {|
    ConstantTimeGreater.ct_gt (self : ref Self) (other : ref u8) :=
      let gtb := bit_and self (not other) in
      let ltb := bit_and (not self) other in
      let pow := 1 in
      loop
        (if lt pow 8 then
          assign ltb := bit_or ltb (shr ltb pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      let bit := bit_and gtb (not ltb) in
      let pow := 1 in
      loop
        (if lt pow 8 then
          assign bit := bit_or bit (shr bit pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      ImplChoice.from (cast (bit_and bit 1) u8);
  |}.
End Impl_ConstantTimeGreater_for_u8.

Module Impl_ConstantTimeGreater_for_u16.
  Definition Self := u16.
  
  Global Instance I : ConstantTimeGreater.Class Self := {|
    ConstantTimeGreater.ct_gt (self : ref Self) (other : ref u16) :=
      let gtb := bit_and self (not other) in
      let ltb := bit_and (not self) other in
      let pow := 1 in
      loop
        (if lt pow 16 then
          assign ltb := bit_or ltb (shr ltb pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      let bit := bit_and gtb (not ltb) in
      let pow := 1 in
      loop
        (if lt pow 16 then
          assign bit := bit_or bit (shr bit pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      ImplChoice.from (cast (bit_and bit 1) u8);
  |}.
End Impl_ConstantTimeGreater_for_u16.

Module Impl_ConstantTimeGreater_for_u32.
  Definition Self := u32.
  
  Global Instance I : ConstantTimeGreater.Class Self := {|
    ConstantTimeGreater.ct_gt (self : ref Self) (other : ref u32) :=
      let gtb := bit_and self (not other) in
      let ltb := bit_and (not self) other in
      let pow := 1 in
      loop
        (if lt pow 32 then
          assign ltb := bit_or ltb (shr ltb pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      let bit := bit_and gtb (not ltb) in
      let pow := 1 in
      loop
        (if lt pow 32 then
          assign bit := bit_or bit (shr bit pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      ImplChoice.from (cast (bit_and bit 1) u8);
  |}.
End Impl_ConstantTimeGreater_for_u32.

Module Impl_ConstantTimeGreater_for_u64.
  Definition Self := u64.
  
  Global Instance I : ConstantTimeGreater.Class Self := {|
    ConstantTimeGreater.ct_gt (self : ref Self) (other : ref u64) :=
      let gtb := bit_and self (not other) in
      let ltb := bit_and (not self) other in
      let pow := 1 in
      loop
        (if lt pow 64 then
          assign ltb := bit_or ltb (shr ltb pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      let bit := bit_and gtb (not ltb) in
      let pow := 1 in
      loop
        (if lt pow 64 then
          assign bit := bit_or bit (shr bit pow) ;;
          assign pow := add pow pow ;;
          tt
        else
          Break ;;
          tt)
        from
        while ;;
      ImplChoice.from (cast (bit_and bit 1) u8);
  |}.
End Impl_ConstantTimeGreater_for_u64.

Module ConstantTimeLess.
  Class Class (Self : Set) : Set := {
    ct_lt : (ref Self) -> ((ref Self) -> Choice);
  }.
  
  Global Instance Method_ct_lt `(Class) : Method "ct_lt" _ := {|
    method := ct_lt;
  |}.
End ConstantTimeLess.

Module Impl_ConstantTimeLess_for_u8.
  Definition Self := u8.
  
  Global Instance I : ConstantTimeLess.Class Self :=
      ConstantTimeLess.Build_Class _.
End Impl_ConstantTimeLess_for_u8.

Module Impl_ConstantTimeLess_for_u16.
  Definition Self := u16.
  
  Global Instance I : ConstantTimeLess.Class Self :=
      ConstantTimeLess.Build_Class _.
End Impl_ConstantTimeLess_for_u16.

Module Impl_ConstantTimeLess_for_u32.
  Definition Self := u32.
  
  Global Instance I : ConstantTimeLess.Class Self :=
      ConstantTimeLess.Build_Class _.
End Impl_ConstantTimeLess_for_u32.

Module Impl_ConstantTimeLess_for_u64.
  Definition Self := u64.
  
  Global Instance I : ConstantTimeLess.Class Self :=
      ConstantTimeLess.Build_Class _.
End Impl_ConstantTimeLess_for_u64.
