(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Definition checked_division (_ : unit) :=
  if eq divisor 0 then
    None
  else
    Some (div dividend divisor).

Definition try_division (_ : unit) :=
  match checked_division dividend divisor with
  | None =>
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1
        ["";" / ";" failed!\n"]
        [_crate::fmt::ImplArgumentV1.new_display
          dividend;_crate::fmt::ImplArgumentV1.new_display divisor]) ;;
    tt
  | Some (quotient) =>
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1
        ["";" / ";" = ";"\n"]
        [_crate::fmt::ImplArgumentV1.new_display
          dividend;_crate::fmt::ImplArgumentV1.new_display
          divisor;_crate::fmt::ImplArgumentV1.new_display quotient]) ;;
    tt
  end.

Definition main (_ : unit) :=
  try_division 4 2 ;;
  try_division 1 0 ;;
  let none := None in
  let _equivalent_none := None in
  let optional_float := Some 0 (* 0 *) in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";" unwraps to ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug
        optional_float;_crate::fmt::ImplArgumentV1.new_debug
        (unwrap optional_float)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";" unwraps to ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug
        none;_crate::fmt::ImplArgumentV1.new_debug (unwrap none)]) ;;
  tt ;;
  tt.