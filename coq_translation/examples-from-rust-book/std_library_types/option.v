(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Definition checked_division (dividend : i32) (divisor : i32) : Option :=
  if (eqb divisor 0 : bool) then
    None
  else
    Some (div dividend divisor).

Definition try_division (dividend : i32) (divisor : i32) : unit :=
  match checked_division dividend divisor with
  | None =>
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1
        [ ""; " / "; " failed!\n" ]
        [
          _crate.fmt.ImplArgumentV1.new_display dividend;
          _crate.fmt.ImplArgumentV1.new_display divisor
        ]) ;;
    tt
  | Some (quotient) =>
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1
        [ ""; " / "; " = "; "\n" ]
        [
          _crate.fmt.ImplArgumentV1.new_display dividend;
          _crate.fmt.ImplArgumentV1.new_display divisor;
          _crate.fmt.ImplArgumentV1.new_display quotient
        ]) ;;
    tt
  end.

Definition main (_ : unit) : unit :=
  try_division 4 2 ;;
  try_division 1 0 ;;
  let none := None in
  let _equivalent_none := None in
  let optional_float := Some 0 (* 0 *) in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ ""; " unwraps to "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_debug optional_float;
        _crate.fmt.ImplArgumentV1.new_debug (method "unwrap" optional_float)
      ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ ""; " unwraps to "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_debug none;
        _crate.fmt.ImplArgumentV1.new_debug (method "unwrap" none)
      ]) ;;
  tt ;;
  tt.
