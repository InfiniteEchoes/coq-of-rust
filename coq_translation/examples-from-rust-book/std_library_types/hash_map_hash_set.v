(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Definition main (_ : unit) :=
  let a := collect (into_iter (ComplexTypePath.into_vec [1;2;3])) in
  let b := collect (into_iter (ComplexTypePath.into_vec [2;3;4])) in
  if not (insert a 4) then
    _crate.panicking.panic "assertion failed: a.insert(4)"
  else
    tt ;;
  if not (contains a 4) then
    _crate.panicking.panic "assertion failed: a.contains(&4)"
  else
    tt ;;
  insert b 5 ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["A: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug a]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["B: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug b]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Union: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug (collect (union a b))]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Difference: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug (collect (difference a b))]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Intersection: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug (collect (intersection a b))]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Symmetric Difference: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug
        (collect (symmetric_difference a b))]) ;;
  tt ;;
  tt.