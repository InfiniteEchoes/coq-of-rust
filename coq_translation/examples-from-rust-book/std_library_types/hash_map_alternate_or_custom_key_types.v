(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Account.
  Record t : Set := {
    username : ref str;
    password : ref str;
  }.
End Account.
Definition Account : Set := Account.t.

(* Impl [Account] of trait [_crate.marker.StructuralPartialEq]*)
Module ImplAccount.
  
End ImplAccount.
(* End impl [Account] *)

(* Impl [Account] of trait [_crate.cmp.PartialEq]*)
Module ImplAccount.
  Definition eq (self : ref Self) (other : ref Account) : bool :=
    and
      (eq self.(Account<'_>.username) other.(Account<'_>.username))
      (eq self.(Account<'_>.password) other.(Account<'_>.password)).
End ImplAccount.
(* End impl [Account] *)

(* Impl [Account] of trait [_crate.marker.StructuralEq]*)
Module ImplAccount.
  
End ImplAccount.
(* End impl [Account] *)

(* Impl [Account] of trait [_crate.cmp.Eq]*)
Module ImplAccount.
  Definition assert_receiver_is_total_eq (self : ref Self) :  :=
    let _ := tt in
    let _ := tt in
    tt.
End ImplAccount.
(* End impl [Account] *)

(* Impl [Account] of trait [_crate.hash.Hash]*)
Module ImplAccount.
  Definition hash (self : ref Self) (state : ref __H) :  :=
    _crate.hash.Hash.hash self.(Account<'_>.username) state ;;
    _crate.hash.Hash.hash self.(Account<'_>.password) state.
End ImplAccount.
(* End impl [Account] *)

Module AccountInfo.
  Record t : Set := {
    name : ref str;
    email : ref str;
  }.
End AccountInfo.
Definition AccountInfo : Set := AccountInfo.t.

Error TyAlias.