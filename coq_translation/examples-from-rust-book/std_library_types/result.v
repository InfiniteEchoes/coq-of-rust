(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module checked :=
  Error Enum.
  
  (* Impl [MathError] of trait [_crate.fmt.Debug]*)
  Module ImplMathError.
    Definition
      fmt
      (self : ref Self)
      (f : ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
      match self with
      | MathError.DivisionByZero =>
        _crate::fmt::ImplFormatter.write_str f "DivisionByZero"
      | MathError.NonPositiveLogarithm =>
        _crate::fmt::ImplFormatter.write_str f "NonPositiveLogarithm"
      | MathError.NegativeSquareRoot =>
        _crate::fmt::ImplFormatter.write_str f "NegativeSquareRoot"
      end.
  End ImplMathError.
  (* End impl [MathError] *)
  
  Error TyAlias..

Error Enum.

(* Impl [MathError] of trait [_crate.fmt.Debug]*)
Module ImplMathError.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    match self with
    | MathError.DivisionByZero =>
      _crate::fmt::ImplFormatter.write_str f "DivisionByZero"
    | MathError.NonPositiveLogarithm =>
      _crate::fmt::ImplFormatter.write_str f "NonPositiveLogarithm"
    | MathError.NegativeSquareRoot =>
      _crate::fmt::ImplFormatter.write_str f "NegativeSquareRoot"
    end.
End ImplMathError.
(* End impl [MathError] *)

Error TyAlias.