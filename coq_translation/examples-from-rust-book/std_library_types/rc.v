(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Definition main (_ : unit) :=
  let rc_examples := to_string "Rc examples" in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1 ["--- rc_a is created ---\n"] []) ;;
  tt ;;
  let rc_a := ImplRc.new rc_examples in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Reference Count of rc_a: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (ImplRc.strong_count rc_a)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["--- rc_a is cloned to rc_b ---\n"]
      []) ;;
  tt ;;
  let rc_b := ImplRc.clone rc_a in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Reference Count of rc_b: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (ImplRc.strong_count rc_b)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Reference Count of rc_a: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (ImplRc.strong_count rc_a)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["rc_a and rc_b are equal: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (eq rc_a rc_b)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Length of the value inside rc_a: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (len rc_a)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Value of rc_b: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display rc_b]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["--- rc_b is dropped out of scope ---\n"]
      []) ;;
  tt ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Reference Count of rc_a: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (ImplRc.strong_count rc_a)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["--- rc_a is dropped out of scope ---\n"]
      []) ;;
  tt ;;
  tt.