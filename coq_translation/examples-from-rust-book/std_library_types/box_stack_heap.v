(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Point.
  Record t : Set := {
    x : f64;
    y : f64;
  }.
End Point.
Definition Point : Set := Point.t.

(* Impl [Point] of trait [_crate.fmt.Debug]*)
Module ImplPoint.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_struct_field2_finish
      f
      "Point"
      "x"
      self.(Point.x)
      "y"
      self.(Point.y).
End ImplPoint.
(* End impl [Point] *)

(* Impl [Point] of trait [_crate.clone.Clone]*)
Module ImplPoint.
  Definition clone (self : ref Self) : Point :=
    let _ := tt in
    deref self.
End ImplPoint.
(* End impl [Point] *)

(* Impl [Point] of trait [_crate.marker.Copy]*)
Module ImplPoint.
  
End ImplPoint.
(* End impl [Point] *)

Module Rectangle.
  Record t : Set := {
    top_left : Point;
    bottom_right : Point;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.