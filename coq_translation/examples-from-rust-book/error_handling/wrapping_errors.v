(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Error TyAlias.

Error Enum.

(* Impl [DoubleError] of trait [_crate.fmt.Debug]*)
Module ImplDoubleError.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    match self with
    | DoubleError.EmptyVec => _crate::fmt::ImplFormatter.write_str f "EmptyVec"
    | DoubleError.Parse (__self_0) =>
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Parse" __self_0
    end.
End ImplDoubleError.
(* End impl [DoubleError] *)

(* Impl [DoubleError] of trait [fmt.Display]*)
Module ImplDoubleError.
  Definition fmt (self : ref Self) (f : ref fmt.Formatter) : fmt.Result :=
    match deref self with
    | DoubleError.EmptyVec =>
      write_fmt
        f
        (_crate::fmt::ImplArguments.new_v1
          ["please use a vector with at least one element"]
          [])
    | DoubleError.Parse () =>
      write_fmt
        f
        (_crate::fmt::ImplArguments.new_v1
          ["the provided string could not be parsed as int"]
          [])
    end.
End ImplDoubleError.
(* End impl [DoubleError] *)

(* Impl [DoubleError] of trait [error.Error]*)
Module ImplDoubleError.
  Definition source (self : ref Self) : Option :=
    match deref self with
    | DoubleError.EmptyVec => None
    | DoubleError.Parse (e) => Some e
    end.
End ImplDoubleError.
(* End impl [DoubleError] *)

(* Impl [DoubleError] of trait [From]*)
Module ImplDoubleError.
  Definition from (err : ParseIntError) : DoubleError :=
    DoubleError.Parse err.
End ImplDoubleError.
(* End impl [DoubleError] *)