(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error Enum.

Module Impl__crate_fmt_Debug_for_Food.
  Definition Self := Food.
  
  #[global] Instance I : _crate.fmt.Debug.Class Self := {|
    fmt
      (self : static_ref Food)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
      match self with
      | Food.Apple => _crate::fmt::ImplFormatter.write_str f "Apple"
      | Food.Carrot => _crate::fmt::ImplFormatter.write_str f "Carrot"
      | Food.Potato => _crate::fmt::ImplFormatter.write_str f "Potato"
      end;
  |}.
Module ImplFood.

Definition Peeled : Set :=
  Food.

Module Impl__crate_fmt_Debug_for_Peeled.
  Definition Self := Peeled.
  
  #[global] Instance I : _crate.fmt.Debug.Class Self := {|
    fmt
      (self : static_ref Peeled)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Peeled" self.0;
  |}.
Module ImplPeeled.

Definition Chopped : Set :=
  Food.

Module Impl__crate_fmt_Debug_for_Chopped.
  Definition Self := Chopped.
  
  #[global] Instance I : _crate.fmt.Debug.Class Self := {|
    fmt
      (self : static_ref Chopped)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Chopped" self.0;
  |}.
Module ImplChopped.

Definition Cooked : Set :=
  Food.

Module Impl__crate_fmt_Debug_for_Cooked.
  Definition Self := Cooked.
  
  #[global] Instance I : _crate.fmt.Debug.Class Self := {|
    fmt
      (self : static_ref Cooked)
      (f : mut_ref _crate.fmt.Formatter)
      : _crate.fmt.Result :=
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Cooked" self.0;
  |}.
Module ImplCooked.

Definition peel (_ : unit) :=
  match food with
  | Some (food) => Some (Peeled food)
  | None => None
  end.

Definition chop (_ : unit) :=
  match peeled with
  | Some (Peeled (food)) => Some (Chopped food)
  | None => None
  end.

Definition cook (_ : unit) :=
  map chopped (fun Chopped (food) => Cooked food).

Definition process (_ : unit) :=
  map
    (map (map food (fun f => Peeled f)) (fun Peeled (f) => Chopped f))
    (fun Chopped (f) => Cooked f).

Definition eat (_ : unit) :=
  match food with
  | Some (food) =>
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1
        ["Mmm. I love ";"\n"]
        [_crate::fmt::ImplArgumentV1.new_debug food]) ;;
    tt
  | None =>
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1 ["Oh no! It wasn't edible.\n"] []) ;;
    tt
  end.

Definition main (_ : unit) :=
  let apple := Some Food.Apple in
  let carrot := Some Food.Carrot in
  let potato := None in
  let cooked_apple := cook (chop (peel apple)) in
  let cooked_carrot := cook (chop (peel carrot)) in
  let cooked_potato := process potato in
  eat cooked_apple ;;
  eat cooked_carrot ;;
  eat cooked_potato ;;
  tt.
