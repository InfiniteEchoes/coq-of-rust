(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Food.
  Inductive t : Set :=
  | Apple
  | Carrot
  | Potato.
End Food.
Definition Food := Food.t.

Module Impl__crate_fmt_Debug_for_Food.
  Definition Self := Food.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      match self with
      | Food.Apple => _crate.fmt.ImplFormatter.write_str f "Apple"
      | Food.Carrot => _crate.fmt.ImplFormatter.write_str f "Carrot"
      | Food.Potato => _crate.fmt.ImplFormatter.write_str f "Potato"
      end;
  |}.
End Impl__crate_fmt_Debug_for_Food.

Module Peeled.
  Inductive t : Set := Build (_ : Food).
  
  Global Instance Get_0 : IndexedField.Class t 0 Food := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Peeled.
Definition Peeled := Peeled.t.

Module Impl__crate_fmt_Debug_for_Peeled.
  Definition Self := Peeled.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_tuple_field1_finish
        f
        "Peeled"
        (IndexedField.get (index := 0) self);
  |}.
End Impl__crate_fmt_Debug_for_Peeled.

Module Chopped.
  Inductive t : Set := Build (_ : Food).
  
  Global Instance Get_0 : IndexedField.Class t 0 Food := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Chopped.
Definition Chopped := Chopped.t.

Module Impl__crate_fmt_Debug_for_Chopped.
  Definition Self := Chopped.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_tuple_field1_finish
        f
        "Chopped"
        (IndexedField.get (index := 0) self);
  |}.
End Impl__crate_fmt_Debug_for_Chopped.

Module Cooked.
  Inductive t : Set := Build (_ : Food).
  
  Global Instance Get_0 : IndexedField.Class t 0 Food := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Cooked.
Definition Cooked := Cooked.t.

Module Impl__crate_fmt_Debug_for_Cooked.
  Definition Self := Cooked.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_tuple_field1_finish
        f
        "Cooked"
        (IndexedField.get (index := 0) self);
  |}.
End Impl__crate_fmt_Debug_for_Cooked.

Definition peel (food : Option) : Option :=
  match food with
  | Some (food) => Some (Peeled.Build food)
  | None => None
  end.

Definition chop (peeled : Option) : Option :=
  match peeled with
  | Some (Peeled (food)) => Some (Chopped.Build food)
  | None => None
  end.

Definition cook (chopped : Option) : Option :=
  method "map" chopped (fun Chopped (food) => Cooked.Build food).

Definition process (food : Option) : Option :=
  method
    "map"
    (method
      "map"
      (method "map" food (fun f => Peeled.Build f))
      (fun Peeled (f) => Chopped.Build f))
    (fun Chopped (f) => Cooked.Build f).

Definition eat (food : Option) : unit :=
  match food with
  | Some (food) =>
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1
        [ "Mmm. I love "; "\n" ]
        [ _crate.fmt.ImplArgumentV1.new_debug food ]) ;;
    tt
  | None =>
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1 [ "Oh no! It wasn't edible.\n" ] [  ]) ;;
    tt
  end.

Definition main (_ : unit) : unit :=
  let apple := Some Food.Apple in
  let carrot := Some Food.Carrot in
  let potato := None in
  let cooked_apple := cook (chop (peel apple)) in
  let cooked_carrot := cook (chop (peel carrot)) in
  let cooked_potato := process potato in
  eat cooked_apple ;;
  eat cooked_carrot ;;
  eat cooked_potato ;;
  tt.
