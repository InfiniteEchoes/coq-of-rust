(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Error Enum.

(* Impl [Food] of trait [_crate.fmt.Debug]*)
Module ImplFood.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    match self with
    | Food.Apple => _crate::fmt::ImplFormatter.write_str f "Apple"
    | Food.Carrot => _crate::fmt::ImplFormatter.write_str f "Carrot"
    | Food.Potato => _crate::fmt::ImplFormatter.write_str f "Potato"
    end.
End ImplFood.
(* End impl [Food] *)

Definition Peeled : Set :=
  Food.

(* Impl [Peeled] of trait [_crate.fmt.Debug]*)
Module ImplPeeled.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_tuple_field1_finish
      f
      "Peeled"
      self.(Peeled.0).
End ImplPeeled.
(* End impl [Peeled] *)

Definition Chopped : Set :=
  Food.

(* Impl [Chopped] of trait [_crate.fmt.Debug]*)
Module ImplChopped.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_tuple_field1_finish
      f
      "Chopped"
      self.(Chopped.0).
End ImplChopped.
(* End impl [Chopped] *)

Definition Cooked : Set :=
  Food.

(* Impl [Cooked] of trait [_crate.fmt.Debug]*)
Module ImplCooked.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_tuple_field1_finish
      f
      "Cooked"
      self.(Cooked.0).
End ImplCooked.
(* End impl [Cooked] *)