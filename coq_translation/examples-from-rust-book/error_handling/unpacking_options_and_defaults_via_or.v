(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Fruit.
  Inductive t : Set :=
  | Apple
  | Orange
  | Banana
  | Kiwi
  | Lemon.
End Fruit.
Definition Fruit := Fruit.t.

Module Impl__crate_fmt_Debug_for_Fruit.
  Definition Self := Fruit.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    Definition fmt
        (self : ref Self)
        (f : mut_ref _crate.fmt.Formatter)
        : _crate.fmt.Result :=
      match self with
      | Fruit.Apple => _crate.fmt.ImplFormatter.write_str f "Apple"
      | Fruit.Orange => _crate.fmt.ImplFormatter.write_str f "Orange"
      | Fruit.Banana => _crate.fmt.ImplFormatter.write_str f "Banana"
      | Fruit.Kiwi => _crate.fmt.ImplFormatter.write_str f "Kiwi"
      | Fruit.Lemon => _crate.fmt.ImplFormatter.write_str f "Lemon"
      end.
    
    Global Instance AF_fmt : Fruit.AssociatedFunction "fmt" _ := {|
      Fruit.associated_function := fmt;
    |}.
    Global Instance M_fmt : Method "fmt" _ := {|
      method := fmt;
    |}.
  |}.
End Impl__crate_fmt_Debug_for_Fruit.

Definition main (_ : unit) : unit :=
  let apple := Some Fruit.Apple in
  let orange := Some Fruit.Orange in
  let no_fruit := None in
  let first_available_fruit :=
    method "or" (method "or" no_fruit orange) apple in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "first_available_fruit: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_debug first_available_fruit ]) ;;
  tt ;;
  tt.
