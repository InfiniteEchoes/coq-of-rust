(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Person.
  Record t : Set := {
    job : Option;
  }.
End Person.
Definition Person : Set := Person.t.

Module Job.
  Record t : Set := {
    phone_number : Option;
  }.
End Job.
Definition Job : Set := Job.t.

(* Impl [Job] of trait [_crate.clone.Clone]*)
Module ImplJob.
  Definition clone (self : ref Self) : Job :=
    let _ := tt in
    deref self.
End ImplJob.
(* End impl [Job] *)

(* Impl [Job] of trait [_crate.marker.Copy]*)
Module ImplJob.
  
End ImplJob.
(* End impl [Job] *)

Module PhoneNumber.
  Record t : Set := {
    area_code : Option;
    number : u32;
  }.
End PhoneNumber.
Definition PhoneNumber : Set := PhoneNumber.t.

(* Impl [PhoneNumber] of trait [_crate.clone.Clone]*)
Module ImplPhoneNumber.
  Definition clone (self : ref Self) : PhoneNumber :=
    let _ := tt in
    let _ := tt in
    deref self.
End ImplPhoneNumber.
(* End impl [PhoneNumber] *)

(* Impl [PhoneNumber] of trait [_crate.marker.Copy]*)
Module ImplPhoneNumber.
  
End ImplPhoneNumber.
(* End impl [PhoneNumber] *)

(* Impl [Person] *)
Module ImplPerson.
  Definition work_phone_area_code (self : ref Self) : Option :=
    match branch
      match branch self.(Person.job) with
      | {| Break.0 := residual; |} => Return (from_residual residual)
      | {| Continue.0 := val; |} => val
      end.(Job.phone_number) with
    | {| Break.0 := residual; |} => Return (from_residual residual)
    | {| Continue.0 := val; |} => val
    end.(PhoneNumber.area_code).
End ImplPerson.
(* End impl [Person] *)