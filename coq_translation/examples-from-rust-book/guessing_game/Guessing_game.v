(* Generated by coq-of-rust *)
(* Guessing-game example from:
   https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html  *)
Require Import CoqOfRust.CoqOfRust.

Import std.prelude.rust_2021.

Module io := std.io.

Module Ordering := std.cmp.Ordering.
Definition Ordering := Ordering.t.

Module Rng := rand.Rng.

Definition main (_ : unit) : unit :=
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1 [ "Guess the number!\n" ] [  ]) ;;
  tt ;;
  let secret_number :=
    method "gen_range" (rand.thread_rng tt) (range_inclusive_new 1 100) in
  loop
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1 [ "Please input your guess.\n" ] [  ]) ;;
    tt ;;
    let guess := ImplString.new tt in
    method
      "expect"
      (method "read_line" (io.stdin tt) guess)
      "Failed to read line" ;;
    let guess :=
      match method "parse" (method "trim" guess) with
      | Ok (num) => num
      | Err (_) => Continue
      end in
    _crate.io._print
      (_crate.fmt.ImplArguments.new_v1
        [ "You guessed: "; "\n" ]
        [ _crate.fmt.ImplArgumentV1.new_display guess ]) ;;
    tt ;;
    match method "cmp" guess secret_number with
    | Ordering.Less =>
      _crate.io._print
        (_crate.fmt.ImplArguments.new_v1 [ "Too small!\n" ] [  ]) ;;
      tt
    | Ordering.Greater =>
      _crate.io._print
        (_crate.fmt.ImplArguments.new_v1 [ "Too big!\n" ] [  ]) ;;
      tt
    | Ordering.Equal =>
      _crate.io._print
        (_crate.fmt.ImplArguments.new_v1 [ "You win!\n" ] [  ]) ;;
      tt ;;
      Break ;;
      tt
    end
    from
    loop.
