(* Generated by coq-of-rust *)
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Sheep.
  Record t : Set := {
    naked : bool;
    name : ref str;
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Class Animal : Set := {
  new : ref str -> Self;
  name : ref Self -> ref str;
  noise : ref Self -> ref str;
  talk : ref Self -> _;
}.

(* Impl [Sheep] *)
Module ImplSheep.
  Definition is_naked (self : ref Self) : bool :=
    self.naked.
  
  Definition shear (self : ref Self) :=
    if is_naked self then
      _crate.io._print
        (_crate::fmt::ImplArguments.new_v1
          ["";" is already naked...\n"]
          [_crate::fmt::ImplArgumentV1.new_display (name self)]) ;;
      tt ;;
      tt
    else
      _crate.io._print
        (_crate::fmt::ImplArguments.new_v1
          ["";" gets a haircut!\n"]
          [_crate::fmt::ImplArgumentV1.new_display self.name]) ;;
      tt ;;
      assign self.naked := true ;;
      tt.
End ImplSheep.
(* End impl [Sheep] *)

(* Impl [Sheep] of trait [Animal]*)
Module ImplSheep.
  Definition new (name : ref str) : Sheep :=
    {| Sheep.name := name; Sheep.naked := false; |}.
  
  Definition name (self : ref Self) : ref str :=
    self.name.
  
  Definition noise (self : ref Self) : ref str :=
    if is_naked self then
      "baaaaah?"
    else
      "baaaaah!".
  
  Definition talk (self : ref Self) :=
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1
        ["";" pauses briefly... ";"\n"]
        [_crate::fmt::ImplArgumentV1.new_display
          self.name;_crate::fmt::ImplArgumentV1.new_display (noise self)]) ;;
    tt ;;
    tt.
End ImplSheep.
(* End impl [Sheep] *)

Definition main (_ : unit) :=
  let dolly := Animal.new "Dolly" in
  talk dolly ;;
  shear dolly ;;
  talk dolly ;;
  tt.