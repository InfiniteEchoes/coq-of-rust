(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Error Struct.

Error Struct.

Error Struct.

(* Impl [FooBar] of trait [_crate.fmt.Debug]*)
Module ImplFooBar.
  Definition
    fmt
    (self : static_ref FooBar)
    (f : mut_ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.write_str f "FooBar".
End ImplFooBar.
(* End impl [FooBar] *)

Error Struct.

(* Impl [BarFoo] of trait [_crate.fmt.Debug]*)
Module ImplBarFoo.
  Definition
    fmt
    (self : static_ref BarFoo)
    (f : mut_ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.write_str f "BarFoo".
End ImplBarFoo.
(* End impl [BarFoo] *)

(* Impl [Foo] of trait [ops.Add]*)
Module ImplFoo.
  Definition Output : Set :=
    FooBar.
  
  Definition add (self : Foo) (_rhs : Bar) : FooBar :=
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1 ["> Foo.add(Bar) was called\n"] []) ;;
    tt ;;
    FooBar.
End ImplFoo.
(* End impl [Foo] *)

(* Impl [Bar] of trait [ops.Add]*)
Module ImplBar.
  Definition Output : Set :=
    BarFoo.
  
  Definition add (self : Bar) (_rhs : Foo) : BarFoo :=
    _crate.io._print
      (_crate::fmt::ImplArguments.new_v1 ["> Bar.add(Foo) was called\n"] []) ;;
    tt ;;
    BarFoo.
End ImplBar.
(* End impl [Bar] *)

Definition main (_ : unit) :=
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Foo + Bar = ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug (add Foo Bar)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Bar + Foo = ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug (add Bar Foo)]) ;;
  tt ;;
  tt.