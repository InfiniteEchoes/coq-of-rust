(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Fibonacci.
  Record t : Set := {
    curr : u32;
    next : u32;
  }.
End Fibonacci.
Definition Fibonacci : Set := Fibonacci.t.

(* Impl [Fibonacci] of trait [Iterator]*)
Module ImplFibonacci.
  Definition Item : Set :=
    u32.
  
  Definition next (self : ref Self) : Option :=
    let current := self.(Fibonacci.curr) in
    assign self.(Fibonacci.curr) := self.(Fibonacci.next) ;;
    assign self.(Fibonacci.next) := add current self.(Fibonacci.next) ;;
    Some current.
End ImplFibonacci.
(* End impl [Fibonacci] *)