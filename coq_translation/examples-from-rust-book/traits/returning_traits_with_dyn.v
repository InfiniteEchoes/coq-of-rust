(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Module Sheep.
  Record t : Set := {
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Cow.
  Record t : Set := {
  }.
End Cow.
Definition Cow : Set := Cow.t.

Class Animal : Set := {
  noise : static_ref Self -> static_ref str;
}.

(* Impl [Sheep] of trait [Animal]*)
Module ImplSheep.
  Definition noise (self : static_ref Sheep) : static_ref str :=
    "baaaaah!".
End ImplSheep.
(* End impl [Sheep] *)

(* Impl [Cow] of trait [Animal]*)
Module ImplCow.
  Definition noise (self : static_ref Cow) : static_ref str :=
    "moooooo!".
End ImplCow.
(* End impl [Cow] *)

Definition random_animal (_ : unit) :=
  if lt random_number 1 (* 0.5 *) then
    ImplBox.new {|  |}
  else
    ImplBox.new {|  |}.

Definition main (_ : unit) :=
  let random_number := 0 (* 0.234 *) in
  let animal := random_animal random_number in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["You've randomly chosen an animal, and it says ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (noise animal)]) ;;
  tt ;;
  tt.