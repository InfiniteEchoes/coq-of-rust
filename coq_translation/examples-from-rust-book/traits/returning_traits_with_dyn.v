(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Sheep.
  Record t : Set := {
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Cow.
  Record t : Set := {
  }.
End Cow.
Definition Cow : Set := Cow.t.

Module Animal.
  Class Class (Self : Set) : Set := {
    noise : (ref Self) -> (ref str);
  }.
  
  Global Instance Method_noise {Self : Set} `{Class Self}
    : Method "noise" _ := {|
    method := noise;
  |}.
End Animal.

Module Impl_Animal_for_Sheep.
  Definition Self := Sheep.
  
  Global Instance I : Animal.Class Self := {|
    Animal.noise (self : ref Sheep) := "baaaaah!";
  |}.
Module ImplSheep.

Module Impl_Animal_for_Cow.
  Definition Self := Cow.
  
  Global Instance I : Animal.Class Self := {|
    Animal.noise (self : ref Cow) := "moooooo!";
  |}.
Module ImplCow.

Definition random_animal (_ : unit) :=
  if lt random_number 1 (* 0.5 *) then
    ImplBox.new {|  |}
  else
    ImplBox.new {|  |}.

Definition main (_ : unit) :=
  let random_number := 0 (* 0.234 *) in
  let animal := random_animal random_number in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["You've randomly chosen an animal, and it says ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (method "noise" animal)]) ;;
  tt ;;
  tt.
