(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Sheep.
  Record t : Set := {
  }.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
End Sheep.
Definition Sheep : Set := Sheep.t.

Module Cow.
  Record t : Set := {
  }.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
End Cow.
Definition Cow : Set := Cow.t.

Module Animal.
  Class Class (Self : Set) : Set := {
    noise : (ref Self) -> (ref str);
  }.
  
  Global Instance Method_noise `(Class) : Method "noise" _ := {|
    method := noise;
  |}.
End Animal.

Module Impl_Animal_for_Sheep.
  Definition Self := Sheep.
  
  Global Instance I : Animal.Class Self := {|
    Definition noise (self : ref Self) : ref str := "baaaaah!".
    
    Global Instance AF_noise : Sheep.AssociatedFunction "noise" _ := {|
      Sheep.associated_function := noise;
    |}.
    Global Instance M_noise : Method "noise" _ := {|
      method := noise;
    |}.
  |}.
End Impl_Animal_for_Sheep.

Module Impl_Animal_for_Cow.
  Definition Self := Cow.
  
  Global Instance I : Animal.Class Self := {|
    Definition noise (self : ref Self) : ref str := "moooooo!".
    
    Global Instance AF_noise : Cow.AssociatedFunction "noise" _ := {|
      Cow.associated_function := noise;
    |}.
    Global Instance M_noise : Method "noise" _ := {|
      method := noise;
    |}.
  |}.
End Impl_Animal_for_Cow.

Definition random_animal (random_number : f64) : Box :=
  if (lt random_number 1 (* 0.5 *) : bool) then
    ImplBox.new {|  |}
  else
    ImplBox.new {|  |}.

Definition main (_ : unit) : unit :=
  let random_number := 0 (* 0.234 *) in
  let animal := random_animal random_number in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "You've randomly chosen an animal, and it says "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (method "noise" animal) ]) ;;
  tt ;;
  tt.
