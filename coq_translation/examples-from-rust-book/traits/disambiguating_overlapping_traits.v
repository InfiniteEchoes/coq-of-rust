(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module UsernameWidget.
  Class Class (Self : Set) : Set := {
    get : (ref Self) -> String;
  }.
  
  Global Instance Method_get `(Class) : Method "get" _ := {|
    method := get;
  |}.
End UsernameWidget.

Module AgeWidget.
  Class Class (Self : Set) : Set := {
    get : (ref Self) -> u8;
  }.
  
  Global Instance Method_get `(Class) : Method "get" _ := {|
    method := get;
  |}.
End AgeWidget.

Module Form.
  Record t : Set := {
    username : String;
    age : u8;
  }.
  
  Global Instance Get_username : NamedField.Class t "username" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_age : NamedField.Class t "age" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
End Form.
Definition Form : Set := Form.t.

Module Impl_UsernameWidget_for_Form.
  Definition Self := Form.
  
  Global Instance I : UsernameWidget.Class Self := {|
    UsernameWidget.get (self : ref Self) :=
      method "clone" (NamedField.get (name := "username") self);
  |}.
End Impl_UsernameWidget_for_Form.

Module Impl_AgeWidget_for_Form.
  Definition Self := Form.
  
  Global Instance I : AgeWidget.Class Self := {|
    AgeWidget.get (self : ref Self) := NamedField.get (name := "age") self;
  |}.
End Impl_AgeWidget_for_Form.

Definition main (_ : unit) : unit :=
  let form :=
    {| Form.username := method "to_owned" "rustacean"; Form.age := 28; |} in
  let username := (UsernameWidget.associated_function "get") form in
  match (method "to_owned" "rustacean", username) with
  | (left_val, right_val) =>
    if not (eqb (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  let age := (AgeWidget.associated_function "get") form in
  match (28, age) with
  | (left_val, right_val) =>
    if not (eqb (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.
