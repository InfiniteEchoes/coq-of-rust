(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module UsernameWidget.
  Class Class (Self : Set) : Set := {
    get : ref Self -> String;
  }.
End UsernameWidget.

Module AgeWidget.
  Class Class (Self : Set) : Set := {
    get : ref Self -> u8;
  }.
End AgeWidget.

Module Form.
  Record t : Set := {
    username : String;
    age : u8;
  }.
End Form.
Definition Form : Set := Form.t.

Module Impl_UsernameWidget_for_Form.
  Definition Self := Form.
  
  Global Instance I : UsernameWidget.Class Self := {|
    UsernameWidget.get (self : ref Form) := clone self.username;
  |}.
Module ImplForm.

Module Impl_AgeWidget_for_Form.
  Definition Self := Form.
  
  Global Instance I : AgeWidget.Class Self := {|
    AgeWidget.get (self : ref Form) := self.age;
  |}.
Module ImplForm.

Definition main (_ : unit) :=
  let form := {| Form.username := to_owned "rustacean"; Form.age := 28; |} in
  let username := UsernameWidget.get form in
  match (to_owned "rustacean", username) with
  | (left_val, right_val) =>
    if not (eq (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  let age := AgeWidget.get form in
  match (28, age) with
  | (left_val, right_val) =>
    if not (eq (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.
