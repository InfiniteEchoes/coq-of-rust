(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Centimeters.
  Inductive t : Set := Build (_ : f64).
  
  Global Instance Get_0 : IndexedField.Class t 0 _ := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Centimeters.
Definition Centimeters := Centimeters.t.

Module Impl__crate_marker_StructuralPartialEq_for_Centimeters.
  Definition Self := Centimeters.
  
  Global Instance I : _crate.marker.StructuralPartialEq.Class Self :=
      _crate.marker.StructuralPartialEq.Build_Class _.
End Impl__crate_marker_StructuralPartialEq_for_Centimeters.

Module Impl__crate_cmp_PartialEq_for_Centimeters.
  Definition Self := Centimeters.
  
  Global Instance I : _crate.cmp.PartialEq.Class Self := {|
    _crate.cmp.PartialEq.eq (self : ref Self) (other : ref Centimeters) :=
      eqb
        (IndexedField.get (index := 0) self)
        (IndexedField.get (index := 0) other);
  |}.
End Impl__crate_cmp_PartialEq_for_Centimeters.

Module Impl__crate_cmp_PartialOrd_for_Centimeters.
  Definition Self := Centimeters.
  
  Global Instance I : _crate.cmp.PartialOrd.Class Self := {|
    _crate.cmp.PartialOrd.partial_cmp
        (self : ref Self)
        (other : ref Centimeters) :=
      (_crate.cmp.PartialOrd.associated_function "partial_cmp")
        (IndexedField.get (index := 0) self)
        (IndexedField.get (index := 0) other);
  |}.
End Impl__crate_cmp_PartialOrd_for_Centimeters.

Module Inches.
  Inductive t : Set := Build (_ : i32).
  
  Global Instance Get_0 : IndexedField.Class t 0 _ := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Inches.
Definition Inches := Inches.t.

Module Impl__crate_fmt_Debug_for_Inches.
  Definition Self := Inches.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_tuple_field1_finish
        f
        "Inches"
        (IndexedField.get (index := 0) self);
  |}.
End Impl__crate_fmt_Debug_for_Inches.

Module ImplInches.
  Definition Self := Inches.
  
  Definition to_centimeters (self : ref Self) : Centimeters :=
    let Inches (inches) := self in
    Centimeters.Build (mul (cast inches f64) 3 (* 2.54 *)).
End ImplInches.

Module Seconds.
  Inductive t : Set := Build (_ : i32).
  
  Global Instance Get_0 : IndexedField.Class t 0 _ := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Seconds.
Definition Seconds := Seconds.t.

Definition main (_ : unit) : unit :=
  let _one_second := Seconds.Build 1 in
  let foot := Inches.Build 12 in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "One foot equals "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_debug foot ]) ;;
  tt ;;
  let meter := Centimeters.Build 100 (* 100.0 *) in
  let cmp :=
    if lt (method "to_centimeters" foot) meter then
      "smaller"
    else
      "bigger" in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "One foot is "; " than one meter.\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display cmp ]) ;;
  tt ;;
  tt.
