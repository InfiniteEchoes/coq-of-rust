(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Definition Centimeters : Set :=
  f64.

(* Impl [Centimeters] of trait [_crate.marker.StructuralPartialEq]*)
Module ImplCentimeters.
  
End ImplCentimeters.
(* End impl [Centimeters] *)

(* Impl [Centimeters] of trait [_crate.cmp.PartialEq]*)
Module ImplCentimeters.
  Definition eq (self : ref Self) (other : ref Centimeters) : bool :=
    eq self.(Centimeters.0) other.(Centimeters.0).
End ImplCentimeters.
(* End impl [Centimeters] *)

(* Impl [Centimeters] of trait [_crate.cmp.PartialOrd]*)
Module ImplCentimeters.
  Definition
    partial_cmp
    (self : ref Self)
    (other : ref Centimeters)
    : _crate.option.Option :=
    _crate.cmp.PartialOrd.partial_cmp
      self.(Centimeters.0)
      other.(Centimeters.0).
End ImplCentimeters.
(* End impl [Centimeters] *)

Definition Inches : Set :=
  i32.

(* Impl [Inches] of trait [_crate.fmt.Debug]*)
Module ImplInches.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_tuple_field1_finish
      f
      "Inches"
      self.(Inches.0).
End ImplInches.
(* End impl [Inches] *)

(* Impl [Inches] *)
Module ImplInches.
  Definition to_centimeters (self : ref Self) : Centimeters :=
    let Inches (inches) := self in
    Centimeters (mul inches 3 (* 2.54 *)).
End ImplInches.
(* End impl [Inches] *)

Definition Seconds : Set :=
  i32.