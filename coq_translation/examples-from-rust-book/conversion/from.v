(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module From := std.convert.From.

Module Number.
  Record t : Set := {
    value : i32;
  }.
  
  Global Instance Get_value : NamedField.Class t "value" _ := {|
    NamedField.get '(Build_t x0) := x0;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
End Number.
Definition Number : Set := Number.t.

Module Impl__crate_fmt_Debug_for_Number.
  Definition Self := Number.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    Definition fmt
        (self : ref Self)
        (f : mut_ref _crate.fmt.Formatter)
        : _crate.fmt.Result :=
      _crate.fmt.ImplFormatter.debug_struct_field1_finish
        f
        "Number"
        "value"
        (NamedField.get (name := "value") self).
    
    Global Instance AF_fmt : Number.AssociatedFunction "fmt" _ := {|
      Number.associated_function := fmt;
    |}.
    Global Instance M_fmt : Method "fmt" _ := {|
      method := fmt;
    |}.
  |}.
End Impl__crate_fmt_Debug_for_Number.

Module Impl_From_for_Number.
  Definition Self := Number.
  
  Global Instance I : From.Class i32 Self := {|
    Definition from (item : i32) : Self := {| Number.value := item; |}.
    
    Global Instance AF_from : Number.AssociatedFunction "from" _ := {|
      Number.associated_function := from;
    |}.
  |}.
End Impl_From_for_Number.

Definition main (_ : unit) : unit :=
  let num := ImplNumber.from 30 in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "My number is "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_debug num ]) ;;
  tt ;;
  tt.
