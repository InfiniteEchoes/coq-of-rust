(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Circle.
  Record t : Set := {
    radius : i32;
  }.
End Circle.
Definition Circle : Set := Circle.t.

(* Impl [Circle] of trait [fmt.Display]*)
Module ImplCircle.
  Definition
    fmt
    (self : static_ref Self)
    (f : mut_ref fmt.Formatter)
    : fmt.Result :=
    write_fmt
      f
      (_crate::fmt::ImplArguments.new_v1
        ["Circle of radius "]
        [_crate::fmt::ImplArgumentV1.new_display self.radius]).
End ImplCircle.
(* End impl [Circle] *)

Definition main (_ : unit) :=
  let circle := {| Circle.radius := 6; |} in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (to_string circle)]) ;;
  tt ;;
  tt.