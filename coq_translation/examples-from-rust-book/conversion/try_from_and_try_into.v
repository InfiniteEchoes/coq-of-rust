(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Definition EvenNumber : Set :=
  i32.

Module Impl__crate_fmt_Debug_for_EvenNumber.
  Definition Self := EvenNumber.
  
  #[global] Instance I : _crate.fmt.Debug.Class Self := {|
    fmt
      (self : static_ref EvenNumber)
      (f : mut_ref _crate.fmt.Formatter)
      :=
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish
        f
        "EvenNumber"
        self.0;
  |}.
Module ImplEvenNumber.

Module Impl__crate_marker_StructuralPartialEq_for_EvenNumber.
  Definition Self := EvenNumber.
  
  #[global] Instance I : _crate.marker.StructuralPartialEq.Class Self := {|
  |}.
Module ImplEvenNumber.

Module Impl__crate_cmp_PartialEq_for_EvenNumber.
  Definition Self := EvenNumber.
  
  #[global] Instance I : _crate.cmp.PartialEq.Class Self := {|
    eq
      (self : static_ref EvenNumber)
      (other : static_ref EvenNumber)
      :=
      eq self.0 other.0;
  |}.
Module ImplEvenNumber.

Module Impl_TryFrom_for_EvenNumber.
  Definition Self := EvenNumber.
  
  #[global] Instance I : TryFrom.Class Self := {|
    Error := ;
    try_from
      (value : i32)
      :=
      if eq (rem value 2) 0 then
        Ok (EvenNumber value)
      else
        Err ();
  |}.
Module ImplEvenNumber.

Definition main (_ : unit) :=
  match (ImplEvenNumber.try_from 8, Ok (EvenNumber 8)) with
  | (left_val, right_val) =>
    if not (eq (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  match (ImplEvenNumber.try_from 5, Err ()) with
  | (left_val, right_val) =>
    if not (eq (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  let result := try_into 8 in
  match (result, Ok (EvenNumber 8)) with
  | (left_val, right_val) =>
    if not (eq (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  let result := try_into 5 in
  match (result, Err ()) with
  | (left_val, right_val) =>
    if not (eq (deref left_val) (deref right_val)) then
      let kind := _crate.panicking.AssertKind.Eq in
      _crate.panicking.assert_failed
        kind
        (deref left_val)
        (deref right_val)
        _crate.option.Option.None ;;
      tt
    else
      tt
  end ;;
  tt.
