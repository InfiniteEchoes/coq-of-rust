(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Definition Borrowed : Set :=
  ref i32.

(* Impl [Borrowed] of trait [_crate.fmt.Debug]*)
Module ImplBorrowed.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_tuple_field1_finish
      f
      "Borrowed"
      self.(Borrowed<'_>.0).
End ImplBorrowed.
(* End impl [Borrowed] *)

Module NamedBorrowed.
  Record t : Set := {
    x : ref i32;
    y : ref i32;
  }.
End NamedBorrowed.
Definition NamedBorrowed : Set := NamedBorrowed.t.

(* Impl [NamedBorrowed] of trait [_crate.fmt.Debug]*)
Module ImplNamedBorrowed.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_struct_field2_finish
      f
      "NamedBorrowed"
      "x"
      self.(NamedBorrowed<'_>.x)
      "y"
      self.(NamedBorrowed<'_>.y).
End ImplNamedBorrowed.
(* End impl [NamedBorrowed] *)

Error Enum.

(* Impl [Either] of trait [_crate.fmt.Debug]*)
Module ImplEither.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    match self with
    | Either.Num (__self_0) =>
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Num" __self_0
    | Either.Ref (__self_0) =>
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Ref" __self_0
    end.
End ImplEither.
(* End impl [Either] *)