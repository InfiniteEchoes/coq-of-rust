(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Definition Borrowed : Set :=
  ref i32.

(* Impl [Borrowed] of trait [_crate.fmt.Debug]*)
Module ImplBorrowed.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Borrowed" self.0.
End ImplBorrowed.
(* End impl [Borrowed] *)

Module NamedBorrowed.
  Record t : Set := {
    x : ref i32;
    y : ref i32;
  }.
End NamedBorrowed.
Definition NamedBorrowed : Set := NamedBorrowed.t.

(* Impl [NamedBorrowed] of trait [_crate.fmt.Debug]*)
Module ImplNamedBorrowed.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_struct_field2_finish
      f
      "NamedBorrowed"
      "x"
      self.x
      "y"
      self.y.
End ImplNamedBorrowed.
(* End impl [NamedBorrowed] *)

Error Enum.

(* Impl [Either] of trait [_crate.fmt.Debug]*)
Module ImplEither.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    match self with
    | Either.Num (__self_0) =>
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Num" __self_0
    | Either.Ref (__self_0) =>
      _crate::fmt::ImplFormatter.debug_tuple_field1_finish f "Ref" __self_0
    end.
End ImplEither.
(* End impl [Either] *)

Definition main (_ : unit) :=
  let x := 18 in
  let y := 15 in
  let single := Borrowed x in
  let double := {| NamedBorrowed.x := x; NamedBorrowed.y := y; |} in
  let reference := Either.Ref x in
  let number := Either.Num y in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["x is borrowed in ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug single]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["x and y are borrowed in ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug double]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["x is borrowed in ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug reference]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["y is *not* borrowed in ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug number]) ;;
  tt ;;
  tt.