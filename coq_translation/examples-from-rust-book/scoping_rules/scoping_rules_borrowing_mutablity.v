(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Module Book.
  Record t : Set := {
    author : ref str;
    title : ref str;
    year : u32;
  }.
End Book.
Definition Book : Set := Book.t.

(* Impl [Book] of trait [_crate.clone.Clone]*)
Module ImplBook.
  Definition clone (self : ref Self) : Book :=
    let _ := tt in
    let _ := tt in
    let _ := tt in
    deref self.
End ImplBook.
(* End impl [Book] *)

(* Impl [Book] of trait [_crate.marker.Copy]*)
Module ImplBook.
  
End ImplBook.
(* End impl [Book] *)

Definition borrow_book (_ : unit) :=
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["I immutably borrowed ";" - ";" edition\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        book.title;_crate::fmt::ImplArgumentV1.new_display book.year]) ;;
  tt ;;
  tt.

Definition new_edition (_ : unit) :=
  assign book.year := 2014 ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["I mutably borrowed ";" - ";" edition\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        book.title;_crate::fmt::ImplArgumentV1.new_display book.year]) ;;
  tt ;;
  tt.

Definition main (_ : unit) :=
  let immutabook := {|
    Book.author := "Douglas Hofstadter";
    Book.title := "GÃ¶del, Escher, Bach";
    Book.year := 1979;
  |} in
  let mutabook := immutabook in
  borrow_book immutabook ;;
  borrow_book mutabook ;;
  new_edition mutabook ;;
  tt.