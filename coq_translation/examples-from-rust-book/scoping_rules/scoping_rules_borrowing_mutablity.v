(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Book.
  Record t : Set := {
    author : ref str;
    title : ref str;
    year : u32;
  }.
End Book.
Definition Book : Set := Book.t.

Module Impl__crate_clone_Clone_for_Book.
  Definition Self := Book.
  
  Global Instance I : _crate.clone.Clone.Class Self := {|
    _crate.clone.Clone.clone (self : ref Book) :=
      let _ := tt in
      let _ := tt in
      let _ := tt in
      deref self;
  |}.
Module ImplBook.

Module Impl__crate_marker_Copy_for_Book.
  Definition Self := Book.
  
  Global Instance I : _crate.marker.Copy.Class Self :=
      _crate.marker.Copy.Build_Class _.
Module ImplBook.

Definition borrow_book (book : ref Book) : unit :=
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["I immutably borrowed ";" - ";" edition\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        book.title;_crate::fmt::ImplArgumentV1.new_display book.year]) ;;
  tt ;;
  tt.

Definition new_edition (book : mut_ref Book) : unit :=
  assign book.year := 2014 ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["I mutably borrowed ";" - ";" edition\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        book.title;_crate::fmt::ImplArgumentV1.new_display book.year]) ;;
  tt ;;
  tt.

Definition main (_ : unit) : unit :=
  let immutabook :=
    {|
      Book.author := "Douglas Hofstadter";
      Book.title := "GÃ¶del, Escher, Bach";
      Book.year := 1979;
    |} in
  let mutabook := immutabook in
  borrow_book immutabook ;;
  borrow_book mutabook ;;
  new_edition mutabook ;;
  tt.
