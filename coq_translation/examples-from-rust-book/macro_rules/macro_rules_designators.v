(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Definition foo (_ : unit) :=
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["You called ";"()\n"]
      [_crate::fmt::ImplArgumentV1.new_debug "foo"]) ;;
  tt ;;
  tt.

Definition bar (_ : unit) :=
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["You called ";"()\n"]
      [_crate::fmt::ImplArgumentV1.new_debug "bar"]) ;;
  tt ;;
  tt.

Definition main (_ : unit) :=
  foo tt ;;
  bar tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";" = ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug
        "1u32 + 1";_crate::fmt::ImplArgumentV1.new_debug (add 1 1)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";" = ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug
        "{ let x = 1u32; x * x + 2 * x - 1 }";_crate::fmt::ImplArgumentV1.new_debug
        let x := 1 in
        sub (add (mul x x) (mul 2 x)) 1]) ;;
  tt ;;
  tt.