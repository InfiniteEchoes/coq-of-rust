(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Class HasArea : Set := {
  area : ref Self -> f64;
}.

(* Impl [Rectangle] of trait [HasArea]*)
Module ImplRectangle.
  Definition area (self : ref Self) : f64 :=
    mul self.(Rectangle.length) self.(Rectangle.height).
End ImplRectangle.
(* End impl [Rectangle] *)

Module Rectangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

(* Impl [Rectangle] of trait [_crate.fmt.Debug]*)
Module ImplRectangle.
  Definition
    fmt
    (self : ref Self)
    (f : ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_struct_field2_finish
      f
      "Rectangle"
      "length"
      self.(Rectangle.length)
      "height"
      self.(Rectangle.height).
End ImplRectangle.
(* End impl [Rectangle] *)

Module Triangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
End Triangle.
Definition Triangle : Set := Triangle.t.