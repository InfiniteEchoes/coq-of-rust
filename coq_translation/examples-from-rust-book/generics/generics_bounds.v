(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Debug := std.fmt.Debug.

Module HasArea.
  Class Class (Self : Set) : Set := {
    area : (ref Self) -> f64;
  }.
  
  Global Instance Method_area `(Class) : Method "area" _ := {|
    method := area;
  |}.
End HasArea.

Module Impl_HasArea_for_Rectangle.
  Definition Self := Rectangle.
  
  Global Instance I : HasArea.Class Self := {|
    HasArea.area (self : ref Self) :=
      mul
        (NamedField.get (name := "length") self)
        (NamedField.get (name := "height") self);
  |}.
End Impl_HasArea_for_Rectangle.

Module Rectangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
  
  Global Instance Get_length : NamedField.Class t "length" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_height : NamedField.Class t "height" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

Module Impl__crate_fmt_Debug_for_Rectangle.
  Definition Self := Rectangle.
  
  Global Instance I : _crate.fmt.Debug.Class Self := {|
    _crate.fmt.Debug.fmt (self : ref Self) (f : mut_ref _crate.fmt.Formatter) :=
      _crate.fmt.ImplFormatter.debug_struct_field2_finish
        f
        "Rectangle"
        "length"
        (NamedField.get (name := "length") self)
        "height"
        (NamedField.get (name := "height") self);
  |}.
End Impl__crate_fmt_Debug_for_Rectangle.

Module Triangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
  
  Global Instance Get_length : NamedField.Class t "length" _ := {|
    NamedField.get '(Build_t x0 _) := x0;
  |}.
  Global Instance Get_height : NamedField.Class t "height" _ := {|
    NamedField.get '(Build_t _ x1) := x1;
  |}.
End Triangle.
Definition Triangle : Set := Triangle.t.

Definition print_debug {T : Set} `{Debug.Class T} (t : ref T) : unit :=
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ ""; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_debug t ]) ;;
  tt ;;
  tt.

Definition area {T : Set} `{HasArea.Class T} (t : ref T) : f64 :=
  method "area" t.

Definition main (_ : unit) : unit :=
  let rectangle :=
    {| Rectangle.length := 3 (* 3.0 *); Rectangle.height := 4 (* 4.0 *); |} in
  let _triangle :=
    {| Triangle.length := 3 (* 3.0 *); Triangle.height := 4 (* 4.0 *); |} in
  print_debug rectangle ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Area: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (method "area" rectangle) ]) ;;
  tt ;;
  tt.
