(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Class HasArea : Set := {
  area : static_ref Self -> f64;
}.

(* Impl [Rectangle] of trait [HasArea]*)
Module ImplRectangle.
  Definition area (self : static_ref Rectangle) : f64 :=
    mul self.length self.height.
End ImplRectangle.
(* End impl [Rectangle] *)

Module Rectangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
End Rectangle.
Definition Rectangle : Set := Rectangle.t.

(* Impl [Rectangle] of trait [_crate.fmt.Debug]*)
Module ImplRectangle.
  Definition
    fmt
    (self : static_ref Rectangle)
    (f : mut_ref _crate.fmt.Formatter)
    : _crate.fmt.Result :=
    _crate::fmt::ImplFormatter.debug_struct_field2_finish
      f
      "Rectangle"
      "length"
      self.length
      "height"
      self.height.
End ImplRectangle.
(* End impl [Rectangle] *)

Module Triangle.
  Record t : Set := {
    length : f64;
    height : f64;
  }.
End Triangle.
Definition Triangle : Set := Triangle.t.

Definition print_debug (_ : unit) :=
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["";"\n"]
      [_crate::fmt::ImplArgumentV1.new_debug t]) ;;
  tt ;;
  tt.

Definition area (_ : unit) :=
  area t.

Definition main (_ : unit) :=
  let rectangle := {|
    Rectangle.length := 3 (* 3.0 *);
    Rectangle.height := 4 (* 4.0 *);
  |} in
  let _triangle := {|
    Triangle.length := 3 (* 3.0 *);
    Triangle.height := 4 (* 4.0 *);
  |} in
  print_debug rectangle ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Area: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (area rectangle)]) ;;
  tt ;;
  tt.