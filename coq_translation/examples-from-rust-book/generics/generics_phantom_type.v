(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Definition PhantomTuple : Set :=
  A * PhantomData.

(* Impl [PhantomTuple] of trait [_crate.marker.StructuralPartialEq]*)
Module ImplPhantomTuple.
  
End ImplPhantomTuple.
(* End impl [PhantomTuple] *)

(* Impl [PhantomTuple] of trait [_crate.cmp.PartialEq]*)
Module ImplPhantomTuple.
  Definition eq (self : ref Self) (other : ref PhantomTuple) : bool :=
    and
      (eq self.(PhantomTuple<A, B>.0) other.(PhantomTuple<A, B>.0))
      (eq self.(PhantomTuple<A, B>.1) other.(PhantomTuple<A, B>.1)).
End ImplPhantomTuple.
(* End impl [PhantomTuple] *)

Module PhantomStruct.
  Record t : Set := {
    first : A;
    phantom : PhantomData;
  }.
End PhantomStruct.
Definition PhantomStruct : Set := PhantomStruct.t.

(* Impl [PhantomStruct] of trait [_crate.marker.StructuralPartialEq]*)
Module ImplPhantomStruct.
  
End ImplPhantomStruct.
(* End impl [PhantomStruct] *)

(* Impl [PhantomStruct] of trait [_crate.cmp.PartialEq]*)
Module ImplPhantomStruct.
  Definition eq (self : ref Self) (other : ref PhantomStruct) : bool :=
    and
      (eq self.(PhantomStruct<A, B>.first) other.(PhantomStruct<A, B>.first))
      (eq
        self.(PhantomStruct<A, B>.phantom)
        other.(PhantomStruct<A, B>.phantom)).
End ImplPhantomStruct.
(* End impl [PhantomStruct] *)