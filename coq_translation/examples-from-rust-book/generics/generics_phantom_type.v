(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

(* Approximation *)

Definition u8 : Set := Z.
Definition u16 : Set := Z.
Definition u32 : Set := Z.
Definition u64 : Set := Z.
Definition u128 : Set := Z.

Definition i8 : Set := Z.
Definition i16 : Set := Z.
Definition i32 : Set := Z.
Definition i64 : Set := Z.
Definition i128 : Set := Z.

Definition f32 : Set := Z.
Definition f64 : Set := Z.

Definition PhantomTuple : Set :=
  A * PhantomData.

(* Impl [PhantomTuple] of trait [_crate.marker.StructuralPartialEq]*)
Module ImplPhantomTuple.
  
End ImplPhantomTuple.
(* End impl [PhantomTuple] *)

(* Impl [PhantomTuple] of trait [_crate.cmp.PartialEq]*)
Module ImplPhantomTuple.
  Definition
    eq
    (self : static_ref PhantomTuple<A, B>)
    (other : static_ref PhantomTuple)
    : bool :=
    and (eq self.0 other.0) (eq self.1 other.1).
End ImplPhantomTuple.
(* End impl [PhantomTuple] *)

Module PhantomStruct.
  Record t : Set := {
    first : A;
    phantom : PhantomData;
  }.
End PhantomStruct.
Definition PhantomStruct : Set := PhantomStruct.t.

(* Impl [PhantomStruct] of trait [_crate.marker.StructuralPartialEq]*)
Module ImplPhantomStruct.
  
End ImplPhantomStruct.
(* End impl [PhantomStruct] *)

(* Impl [PhantomStruct] of trait [_crate.cmp.PartialEq]*)
Module ImplPhantomStruct.
  Definition
    eq
    (self : static_ref PhantomStruct<A, B>)
    (other : static_ref PhantomStruct)
    : bool :=
    and (eq self.first other.first) (eq self.phantom other.phantom).
End ImplPhantomStruct.
(* End impl [PhantomStruct] *)

Definition main (_ : unit) :=
  let _tuple1 := PhantomTuple Q PhantomData in
  let _tuple2 := PhantomTuple Q PhantomData in
  let _struct1 := {|
    PhantomStruct.first := Q;
    PhantomStruct.phantom := PhantomData;
  |} in
  let _struct2 := {|
    PhantomStruct.first := Q;
    PhantomStruct.phantom := PhantomData;
  |} in
  tt.