(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module Years.
  Inductive t : Set := Build (_ : i64).
  
  Global Instance Get_0 : IndexedField.Class t 0 i64 := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Years.
Definition Years := Years.t.

Module Days.
  Inductive t : Set := Build (_ : i64).
  
  Global Instance Get_0 : IndexedField.Class t 0 i64 := {|
    IndexedField.get '(Build x0) := x0;
  |}.
End Days.
Definition Days := Days.t.

(* Impl [Years] *)
Module ImplYears.
  Definition to_days (self : ref Years) : Days :=
    Days.Build (mul (IndexedField.get (index := 0) self) 365).
End ImplYears.
(* End impl [Years] *)

(* Impl [Days] *)
Module ImplDays.
  Definition to_years (self : ref Days) : Years :=
    Years.Build (div (IndexedField.get (index := 0) self) 365).
End ImplDays.
(* End impl [Days] *)

Definition old_enough (age : ref Years) : bool :=
  ge (IndexedField.get (index := 0) age) 18.

Definition main (_ : unit) : unit :=
  let age := Years.Build 5 in
  let age_days := method "to_days" age in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Old enough "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (old_enough age) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Old enough "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_display
          (old_enough (method "to_years" age_days))
      ]) ;;
  tt ;;
  tt.
