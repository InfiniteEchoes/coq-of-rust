(* Generated by coq-of-rust *)
Require Import Coq.Strings.String.
Require Import Coq.ZArith.ZArith.
Local Open Scope Z.

Definition u8 : Set := Z.

(* Approximation *)
Definition f64 : Set := Z.

Definition Container : Set :=
  i32 * i32.

Class Contains : Set := {
  contains : ref Self -> ref A -> ref B -> bool;
  first : ref Self -> i32;
  last : ref Self -> i32;
}.

(* Impl [Container] of trait [Contains]*)
Module ImplContainer.
  Definition
    contains
    (self : ref Self)
    (number_1 : ref i32)
    (number_2 : ref i32)
    : bool :=
    and (eq self.0 number_1) (eq self.1 number_2).
  
  Definition first (self : ref Self) : i32 :=
    self.0.
  
  Definition last (self : ref Self) : i32 :=
    self.1.
End ImplContainer.
(* End impl [Container] *)

Definition difference (_ : unit) :=
  sub (last container) (first container).

Definition main (_ : unit) :=
  let number_1 := 3 in
  let number_2 := 10 in
  let container := Container number_1 number_2 in
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Does container contain ";" and ";": ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display
        number_1;_crate::fmt::ImplArgumentV1.new_display
        number_2;_crate::fmt::ImplArgumentV1.new_display
        (contains container number_1 number_2)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["First number: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (first container)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["Last number: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (last container)]) ;;
  tt ;;
  _crate.io._print
    (_crate::fmt::ImplArguments.new_v1
      ["The difference is: ";"\n"]
      [_crate::fmt::ImplArgumentV1.new_display (difference container)]) ;;
  tt ;;
  tt.