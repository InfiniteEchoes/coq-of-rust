(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Import Root.std.prelude.rust_2015.

Module Container.
  Inductive t : Set := Build (_ : i32) (_ : i32).
  
  Global Instance Get_0 : IndexedField.Class t 0 _ := {|
    IndexedField.get '(Build x0 _) := x0;
  |}.
  Global Instance Get_1 : IndexedField.Class t 1 _ := {|
    IndexedField.get '(Build _ x1) := x1;
  |}.
End Container.
Definition Container := Container.t.

Module Contains.
  Class Class (A B Self : Set) : Set := {
    contains : (ref Self) -> ((ref A) -> ((ref B) -> bool));
    first : (ref Self) -> i32;
    last : (ref Self) -> i32;
  }.
  
  Global Instance Method_contains `(Class) : Method "contains" _ := {|
    method := contains;
  |}.
  Global Instance Method_first `(Class) : Method "first" _ := {|
    method := first;
  |}.
  Global Instance Method_last `(Class) : Method "last" _ := {|
    method := last;
  |}.
  Class AssociatedFunction (name : string) (T : Set) : Set := {
    associated_function : T;
  }.
  Arguments associated_function name {T AssociatedFunction}.
End Contains.

Module Impl_Contains_for_Container.
  Definition Self := Container.
  
  Definition contains
      (self : ref Self)
      (number_1 : ref i32)
      (number_2 : ref i32)
      : bool :=
    andb
      (eqb (IndexedField.get (index := 0) self) number_1)
      (eqb (IndexedField.get (index := 1) self) number_2).
  
  Global Instance M_contains : Method "contains" _ := {|
    method := contains;
  |}.
  Global Instance AF_contains : Container.AssociatedFunction "contains" _ := {|
    Container.associated_function := contains;
  |}.
  Global Instance AFT_contains : Contains.AssociatedFunction "contains" _ := {|
    Contains.associated_function := contains;
  |}.
  
  Definition first (self : ref Self) : i32 :=
    IndexedField.get (index := 0) self.
  
  Global Instance M_first : Method "first" _ := {|
    method := first;
  |}.
  Global Instance AF_first : Container.AssociatedFunction "first" _ := {|
    Container.associated_function := first;
  |}.
  Global Instance AFT_first : Contains.AssociatedFunction "first" _ := {|
    Contains.associated_function := first;
  |}.
  
  Definition last (self : ref Self) : i32 := IndexedField.get (index := 1) self.
  
  Global Instance M_last : Method "last" _ := {|
    method := last;
  |}.
  Global Instance AF_last : Container.AssociatedFunction "last" _ := {|
    Container.associated_function := last;
  |}.
  Global Instance AFT_last : Contains.AssociatedFunction "last" _ := {|
    Contains.associated_function := last;
  |}.
  
  Global Instance I : Contains.Class i32 i32 Self := {|
    Contains.contains := contains;
    Contains.first := first;
    Contains.last := last;
  |}.
End Impl_Contains_for_Container.

Definition difference
    {A B C : Set}
    `{Contains.Class A B C}
    (container : ref C)
    : i32 :=
  sub (method "last" container) (method "first" container).

Definition main (_ : unit) : unit :=
  let number_1 := 3 in
  let number_2 := 10 in
  let container := Container.Build number_1 number_2 in
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Does container contain "; " and "; ": "; "\n" ]
      [
        _crate.fmt.ImplArgumentV1.new_display number_1;
        _crate.fmt.ImplArgumentV1.new_display number_2;
        _crate.fmt.ImplArgumentV1.new_display
          (method "contains" container number_1 number_2)
      ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "First number: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (method "first" container) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "Last number: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (method "last" container) ]) ;;
  tt ;;
  _crate.io._print
    (_crate.fmt.ImplArguments.new_v1
      [ "The difference is: "; "\n" ]
      [ _crate.fmt.ImplArgumentV1.new_display (difference container) ]) ;;
  tt ;;
  tt.
